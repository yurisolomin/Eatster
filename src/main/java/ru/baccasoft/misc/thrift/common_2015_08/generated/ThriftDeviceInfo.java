/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.misc.thrift.common_2015_08.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-27")
public class ThriftDeviceInfo implements org.apache.thrift.TBase<ThriftDeviceInfo, ThriftDeviceInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftDeviceInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftDeviceInfo");

  private static final org.apache.thrift.protocol.TField PLATFORM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platformType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_PHONE_LAYOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("isPhoneLayout", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceModel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LANDSCAPE_SCREEN_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("landscapeScreenWidth", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WIDTH_DPI_FIELD_DESC = new org.apache.thrift.protocol.TField("widthDpi", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LANDSCAPE_SCREEN_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("landscapeScreenHeight", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HEIGHT_DPI_FIELD_DESC = new org.apache.thrift.protocol.TField("heightDpi", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftDeviceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftDeviceInfoTupleSchemeFactory());
  }

  private String platformType; // required
  private boolean isPhoneLayout; // required
  private String osVersion; // required
  private String deviceModel; // required
  private int landscapeScreenWidth; // required
  private double widthDpi; // required
  private int landscapeScreenHeight; // required
  private double heightDpi; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLATFORM_TYPE((short)1, "platformType"),
    IS_PHONE_LAYOUT((short)2, "isPhoneLayout"),
    OS_VERSION((short)3, "osVersion"),
    DEVICE_MODEL((short)4, "deviceModel"),
    LANDSCAPE_SCREEN_WIDTH((short)5, "landscapeScreenWidth"),
    WIDTH_DPI((short)6, "widthDpi"),
    LANDSCAPE_SCREEN_HEIGHT((short)7, "landscapeScreenHeight"),
    HEIGHT_DPI((short)8, "heightDpi");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATFORM_TYPE
          return PLATFORM_TYPE;
        case 2: // IS_PHONE_LAYOUT
          return IS_PHONE_LAYOUT;
        case 3: // OS_VERSION
          return OS_VERSION;
        case 4: // DEVICE_MODEL
          return DEVICE_MODEL;
        case 5: // LANDSCAPE_SCREEN_WIDTH
          return LANDSCAPE_SCREEN_WIDTH;
        case 6: // WIDTH_DPI
          return WIDTH_DPI;
        case 7: // LANDSCAPE_SCREEN_HEIGHT
          return LANDSCAPE_SCREEN_HEIGHT;
        case 8: // HEIGHT_DPI
          return HEIGHT_DPI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISPHONELAYOUT_ISSET_ID = 0;
  private static final int __LANDSCAPESCREENWIDTH_ISSET_ID = 1;
  private static final int __WIDTHDPI_ISSET_ID = 2;
  private static final int __LANDSCAPESCREENHEIGHT_ISSET_ID = 3;
  private static final int __HEIGHTDPI_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATFORM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platformType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PHONE_LAYOUT, new org.apache.thrift.meta_data.FieldMetaData("isPhoneLayout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("deviceModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANDSCAPE_SCREEN_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("landscapeScreenWidth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH_DPI, new org.apache.thrift.meta_data.FieldMetaData("widthDpi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LANDSCAPE_SCREEN_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("landscapeScreenHeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT_DPI, new org.apache.thrift.meta_data.FieldMetaData("heightDpi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftDeviceInfo.class, metaDataMap);
  }

  public ThriftDeviceInfo() {
  }

  public ThriftDeviceInfo(
    String platformType,
    boolean isPhoneLayout,
    String osVersion,
    String deviceModel,
    int landscapeScreenWidth,
    double widthDpi,
    int landscapeScreenHeight,
    double heightDpi)
  {
    this();
    this.platformType = platformType;
    this.isPhoneLayout = isPhoneLayout;
    setIsPhoneLayoutIsSet(true);
    this.osVersion = osVersion;
    this.deviceModel = deviceModel;
    this.landscapeScreenWidth = landscapeScreenWidth;
    setLandscapeScreenWidthIsSet(true);
    this.widthDpi = widthDpi;
    setWidthDpiIsSet(true);
    this.landscapeScreenHeight = landscapeScreenHeight;
    setLandscapeScreenHeightIsSet(true);
    this.heightDpi = heightDpi;
    setHeightDpiIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftDeviceInfo(ThriftDeviceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlatformType()) {
      this.platformType = other.platformType;
    }
    this.isPhoneLayout = other.isPhoneLayout;
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetDeviceModel()) {
      this.deviceModel = other.deviceModel;
    }
    this.landscapeScreenWidth = other.landscapeScreenWidth;
    this.widthDpi = other.widthDpi;
    this.landscapeScreenHeight = other.landscapeScreenHeight;
    this.heightDpi = other.heightDpi;
  }

  public ThriftDeviceInfo deepCopy() {
    return new ThriftDeviceInfo(this);
  }

  @Override
  public void clear() {
    this.platformType = null;
    setIsPhoneLayoutIsSet(false);
    this.isPhoneLayout = false;
    this.osVersion = null;
    this.deviceModel = null;
    setLandscapeScreenWidthIsSet(false);
    this.landscapeScreenWidth = 0;
    setWidthDpiIsSet(false);
    this.widthDpi = 0.0;
    setLandscapeScreenHeightIsSet(false);
    this.landscapeScreenHeight = 0;
    setHeightDpiIsSet(false);
    this.heightDpi = 0.0;
  }

  public String getPlatformType() {
    return this.platformType;
  }

  public ThriftDeviceInfo setPlatformType(String platformType) {
    this.platformType = platformType;
    return this;
  }

  public void unsetPlatformType() {
    this.platformType = null;
  }

  /** Returns true if field platformType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformType() {
    return this.platformType != null;
  }

  public void setPlatformTypeIsSet(boolean value) {
    if (!value) {
      this.platformType = null;
    }
  }

  public boolean isIsPhoneLayout() {
    return this.isPhoneLayout;
  }

  public ThriftDeviceInfo setIsPhoneLayout(boolean isPhoneLayout) {
    this.isPhoneLayout = isPhoneLayout;
    setIsPhoneLayoutIsSet(true);
    return this;
  }

  public void unsetIsPhoneLayout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPHONELAYOUT_ISSET_ID);
  }

  /** Returns true if field isPhoneLayout is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPhoneLayout() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPHONELAYOUT_ISSET_ID);
  }

  public void setIsPhoneLayoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPHONELAYOUT_ISSET_ID, value);
  }

  public String getOsVersion() {
    return this.osVersion;
  }

  public ThriftDeviceInfo setOsVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public String getDeviceModel() {
    return this.deviceModel;
  }

  public ThriftDeviceInfo setDeviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

  public void unsetDeviceModel() {
    this.deviceModel = null;
  }

  /** Returns true if field deviceModel is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceModel() {
    return this.deviceModel != null;
  }

  public void setDeviceModelIsSet(boolean value) {
    if (!value) {
      this.deviceModel = null;
    }
  }

  public int getLandscapeScreenWidth() {
    return this.landscapeScreenWidth;
  }

  public ThriftDeviceInfo setLandscapeScreenWidth(int landscapeScreenWidth) {
    this.landscapeScreenWidth = landscapeScreenWidth;
    setLandscapeScreenWidthIsSet(true);
    return this;
  }

  public void unsetLandscapeScreenWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LANDSCAPESCREENWIDTH_ISSET_ID);
  }

  /** Returns true if field landscapeScreenWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetLandscapeScreenWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __LANDSCAPESCREENWIDTH_ISSET_ID);
  }

  public void setLandscapeScreenWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LANDSCAPESCREENWIDTH_ISSET_ID, value);
  }

  public double getWidthDpi() {
    return this.widthDpi;
  }

  public ThriftDeviceInfo setWidthDpi(double widthDpi) {
    this.widthDpi = widthDpi;
    setWidthDpiIsSet(true);
    return this;
  }

  public void unsetWidthDpi() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTHDPI_ISSET_ID);
  }

  /** Returns true if field widthDpi is set (has been assigned a value) and false otherwise */
  public boolean isSetWidthDpi() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTHDPI_ISSET_ID);
  }

  public void setWidthDpiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTHDPI_ISSET_ID, value);
  }

  public int getLandscapeScreenHeight() {
    return this.landscapeScreenHeight;
  }

  public ThriftDeviceInfo setLandscapeScreenHeight(int landscapeScreenHeight) {
    this.landscapeScreenHeight = landscapeScreenHeight;
    setLandscapeScreenHeightIsSet(true);
    return this;
  }

  public void unsetLandscapeScreenHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LANDSCAPESCREENHEIGHT_ISSET_ID);
  }

  /** Returns true if field landscapeScreenHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetLandscapeScreenHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __LANDSCAPESCREENHEIGHT_ISSET_ID);
  }

  public void setLandscapeScreenHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LANDSCAPESCREENHEIGHT_ISSET_ID, value);
  }

  public double getHeightDpi() {
    return this.heightDpi;
  }

  public ThriftDeviceInfo setHeightDpi(double heightDpi) {
    this.heightDpi = heightDpi;
    setHeightDpiIsSet(true);
    return this;
  }

  public void unsetHeightDpi() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHTDPI_ISSET_ID);
  }

  /** Returns true if field heightDpi is set (has been assigned a value) and false otherwise */
  public boolean isSetHeightDpi() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHTDPI_ISSET_ID);
  }

  public void setHeightDpiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHTDPI_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLATFORM_TYPE:
      if (value == null) {
        unsetPlatformType();
      } else {
        setPlatformType((String)value);
      }
      break;

    case IS_PHONE_LAYOUT:
      if (value == null) {
        unsetIsPhoneLayout();
      } else {
        setIsPhoneLayout((Boolean)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((String)value);
      }
      break;

    case DEVICE_MODEL:
      if (value == null) {
        unsetDeviceModel();
      } else {
        setDeviceModel((String)value);
      }
      break;

    case LANDSCAPE_SCREEN_WIDTH:
      if (value == null) {
        unsetLandscapeScreenWidth();
      } else {
        setLandscapeScreenWidth((Integer)value);
      }
      break;

    case WIDTH_DPI:
      if (value == null) {
        unsetWidthDpi();
      } else {
        setWidthDpi((Double)value);
      }
      break;

    case LANDSCAPE_SCREEN_HEIGHT:
      if (value == null) {
        unsetLandscapeScreenHeight();
      } else {
        setLandscapeScreenHeight((Integer)value);
      }
      break;

    case HEIGHT_DPI:
      if (value == null) {
        unsetHeightDpi();
      } else {
        setHeightDpi((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATFORM_TYPE:
      return getPlatformType();

    case IS_PHONE_LAYOUT:
      return Boolean.valueOf(isIsPhoneLayout());

    case OS_VERSION:
      return getOsVersion();

    case DEVICE_MODEL:
      return getDeviceModel();

    case LANDSCAPE_SCREEN_WIDTH:
      return Integer.valueOf(getLandscapeScreenWidth());

    case WIDTH_DPI:
      return Double.valueOf(getWidthDpi());

    case LANDSCAPE_SCREEN_HEIGHT:
      return Integer.valueOf(getLandscapeScreenHeight());

    case HEIGHT_DPI:
      return Double.valueOf(getHeightDpi());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLATFORM_TYPE:
      return isSetPlatformType();
    case IS_PHONE_LAYOUT:
      return isSetIsPhoneLayout();
    case OS_VERSION:
      return isSetOsVersion();
    case DEVICE_MODEL:
      return isSetDeviceModel();
    case LANDSCAPE_SCREEN_WIDTH:
      return isSetLandscapeScreenWidth();
    case WIDTH_DPI:
      return isSetWidthDpi();
    case LANDSCAPE_SCREEN_HEIGHT:
      return isSetLandscapeScreenHeight();
    case HEIGHT_DPI:
      return isSetHeightDpi();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftDeviceInfo)
      return this.equals((ThriftDeviceInfo)that);
    return false;
  }

  public boolean equals(ThriftDeviceInfo that) {
    if (that == null)
      return false;

    boolean this_present_platformType = true && this.isSetPlatformType();
    boolean that_present_platformType = true && that.isSetPlatformType();
    if (this_present_platformType || that_present_platformType) {
      if (!(this_present_platformType && that_present_platformType))
        return false;
      if (!this.platformType.equals(that.platformType))
        return false;
    }

    boolean this_present_isPhoneLayout = true;
    boolean that_present_isPhoneLayout = true;
    if (this_present_isPhoneLayout || that_present_isPhoneLayout) {
      if (!(this_present_isPhoneLayout && that_present_isPhoneLayout))
        return false;
      if (this.isPhoneLayout != that.isPhoneLayout)
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_deviceModel = true && this.isSetDeviceModel();
    boolean that_present_deviceModel = true && that.isSetDeviceModel();
    if (this_present_deviceModel || that_present_deviceModel) {
      if (!(this_present_deviceModel && that_present_deviceModel))
        return false;
      if (!this.deviceModel.equals(that.deviceModel))
        return false;
    }

    boolean this_present_landscapeScreenWidth = true;
    boolean that_present_landscapeScreenWidth = true;
    if (this_present_landscapeScreenWidth || that_present_landscapeScreenWidth) {
      if (!(this_present_landscapeScreenWidth && that_present_landscapeScreenWidth))
        return false;
      if (this.landscapeScreenWidth != that.landscapeScreenWidth)
        return false;
    }

    boolean this_present_widthDpi = true;
    boolean that_present_widthDpi = true;
    if (this_present_widthDpi || that_present_widthDpi) {
      if (!(this_present_widthDpi && that_present_widthDpi))
        return false;
      if (this.widthDpi != that.widthDpi)
        return false;
    }

    boolean this_present_landscapeScreenHeight = true;
    boolean that_present_landscapeScreenHeight = true;
    if (this_present_landscapeScreenHeight || that_present_landscapeScreenHeight) {
      if (!(this_present_landscapeScreenHeight && that_present_landscapeScreenHeight))
        return false;
      if (this.landscapeScreenHeight != that.landscapeScreenHeight)
        return false;
    }

    boolean this_present_heightDpi = true;
    boolean that_present_heightDpi = true;
    if (this_present_heightDpi || that_present_heightDpi) {
      if (!(this_present_heightDpi && that_present_heightDpi))
        return false;
      if (this.heightDpi != that.heightDpi)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_platformType = true && (isSetPlatformType());
    list.add(present_platformType);
    if (present_platformType)
      list.add(platformType);

    boolean present_isPhoneLayout = true;
    list.add(present_isPhoneLayout);
    if (present_isPhoneLayout)
      list.add(isPhoneLayout);

    boolean present_osVersion = true && (isSetOsVersion());
    list.add(present_osVersion);
    if (present_osVersion)
      list.add(osVersion);

    boolean present_deviceModel = true && (isSetDeviceModel());
    list.add(present_deviceModel);
    if (present_deviceModel)
      list.add(deviceModel);

    boolean present_landscapeScreenWidth = true;
    list.add(present_landscapeScreenWidth);
    if (present_landscapeScreenWidth)
      list.add(landscapeScreenWidth);

    boolean present_widthDpi = true;
    list.add(present_widthDpi);
    if (present_widthDpi)
      list.add(widthDpi);

    boolean present_landscapeScreenHeight = true;
    list.add(present_landscapeScreenHeight);
    if (present_landscapeScreenHeight)
      list.add(landscapeScreenHeight);

    boolean present_heightDpi = true;
    list.add(present_heightDpi);
    if (present_heightDpi)
      list.add(heightDpi);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftDeviceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatformType()).compareTo(other.isSetPlatformType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformType, other.platformType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPhoneLayout()).compareTo(other.isSetIsPhoneLayout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPhoneLayout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPhoneLayout, other.isPhoneLayout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(other.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, other.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceModel()).compareTo(other.isSetDeviceModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceModel, other.deviceModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLandscapeScreenWidth()).compareTo(other.isSetLandscapeScreenWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLandscapeScreenWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landscapeScreenWidth, other.landscapeScreenWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidthDpi()).compareTo(other.isSetWidthDpi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidthDpi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.widthDpi, other.widthDpi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLandscapeScreenHeight()).compareTo(other.isSetLandscapeScreenHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLandscapeScreenHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landscapeScreenHeight, other.landscapeScreenHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeightDpi()).compareTo(other.isSetHeightDpi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeightDpi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heightDpi, other.heightDpi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftDeviceInfo(");
    boolean first = true;

    sb.append("platformType:");
    if (this.platformType == null) {
      sb.append("null");
    } else {
      sb.append(this.platformType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPhoneLayout:");
    sb.append(this.isPhoneLayout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("osVersion:");
    if (this.osVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.osVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceModel:");
    if (this.deviceModel == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("landscapeScreenWidth:");
    sb.append(this.landscapeScreenWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("widthDpi:");
    sb.append(this.widthDpi);
    first = false;
    if (!first) sb.append(", ");
    sb.append("landscapeScreenHeight:");
    sb.append(this.landscapeScreenHeight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heightDpi:");
    sb.append(this.heightDpi);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftDeviceInfoStandardSchemeFactory implements SchemeFactory {
    public ThriftDeviceInfoStandardScheme getScheme() {
      return new ThriftDeviceInfoStandardScheme();
    }
  }

  private static class ThriftDeviceInfoStandardScheme extends StandardScheme<ThriftDeviceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftDeviceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATFORM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platformType = iprot.readString();
              struct.setPlatformTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_PHONE_LAYOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPhoneLayout = iprot.readBool();
              struct.setIsPhoneLayoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceModel = iprot.readString();
              struct.setDeviceModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANDSCAPE_SCREEN_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.landscapeScreenWidth = iprot.readI32();
              struct.setLandscapeScreenWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WIDTH_DPI
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.widthDpi = iprot.readDouble();
              struct.setWidthDpiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LANDSCAPE_SCREEN_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.landscapeScreenHeight = iprot.readI32();
              struct.setLandscapeScreenHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HEIGHT_DPI
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.heightDpi = iprot.readDouble();
              struct.setHeightDpiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftDeviceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platformType != null) {
        oprot.writeFieldBegin(PLATFORM_TYPE_FIELD_DESC);
        oprot.writeString(struct.platformType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PHONE_LAYOUT_FIELD_DESC);
      oprot.writeBool(struct.isPhoneLayout);
      oprot.writeFieldEnd();
      if (struct.osVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.osVersion);
        oprot.writeFieldEnd();
      }
      if (struct.deviceModel != null) {
        oprot.writeFieldBegin(DEVICE_MODEL_FIELD_DESC);
        oprot.writeString(struct.deviceModel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LANDSCAPE_SCREEN_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.landscapeScreenWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_DPI_FIELD_DESC);
      oprot.writeDouble(struct.widthDpi);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LANDSCAPE_SCREEN_HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.landscapeScreenHeight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_DPI_FIELD_DESC);
      oprot.writeDouble(struct.heightDpi);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftDeviceInfoTupleSchemeFactory implements SchemeFactory {
    public ThriftDeviceInfoTupleScheme getScheme() {
      return new ThriftDeviceInfoTupleScheme();
    }
  }

  private static class ThriftDeviceInfoTupleScheme extends TupleScheme<ThriftDeviceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftDeviceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatformType()) {
        optionals.set(0);
      }
      if (struct.isSetIsPhoneLayout()) {
        optionals.set(1);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(2);
      }
      if (struct.isSetDeviceModel()) {
        optionals.set(3);
      }
      if (struct.isSetLandscapeScreenWidth()) {
        optionals.set(4);
      }
      if (struct.isSetWidthDpi()) {
        optionals.set(5);
      }
      if (struct.isSetLandscapeScreenHeight()) {
        optionals.set(6);
      }
      if (struct.isSetHeightDpi()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPlatformType()) {
        oprot.writeString(struct.platformType);
      }
      if (struct.isSetIsPhoneLayout()) {
        oprot.writeBool(struct.isPhoneLayout);
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.osVersion);
      }
      if (struct.isSetDeviceModel()) {
        oprot.writeString(struct.deviceModel);
      }
      if (struct.isSetLandscapeScreenWidth()) {
        oprot.writeI32(struct.landscapeScreenWidth);
      }
      if (struct.isSetWidthDpi()) {
        oprot.writeDouble(struct.widthDpi);
      }
      if (struct.isSetLandscapeScreenHeight()) {
        oprot.writeI32(struct.landscapeScreenHeight);
      }
      if (struct.isSetHeightDpi()) {
        oprot.writeDouble(struct.heightDpi);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftDeviceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.platformType = iprot.readString();
        struct.setPlatformTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isPhoneLayout = iprot.readBool();
        struct.setIsPhoneLayoutIsSet(true);
      }
      if (incoming.get(2)) {
        struct.osVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deviceModel = iprot.readString();
        struct.setDeviceModelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.landscapeScreenWidth = iprot.readI32();
        struct.setLandscapeScreenWidthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.widthDpi = iprot.readDouble();
        struct.setWidthDpiIsSet(true);
      }
      if (incoming.get(6)) {
        struct.landscapeScreenHeight = iprot.readI32();
        struct.setLandscapeScreenHeightIsSet(true);
      }
      if (incoming.get(7)) {
        struct.heightDpi = iprot.readDouble();
        struct.setHeightDpiIsSet(true);
      }
    }
  }

}

