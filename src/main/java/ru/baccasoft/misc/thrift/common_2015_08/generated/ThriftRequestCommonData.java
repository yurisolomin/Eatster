/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.misc.thrift.common_2015_08.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-27")
public class ThriftRequestCommonData implements org.apache.thrift.TBase<ThriftRequestCommonData, ThriftRequestCommonData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftRequestCommonData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftRequestCommonData");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("userLogin", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUTH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authToken", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPlatform", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PUSH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("pushToken", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clientVersion", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftRequestCommonDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftRequestCommonDataTupleSchemeFactory());
  }

  private String protocolVersion; // required
  private String userId; // required
  private String deviceId; // required
  private String userLogin; // required
  private String authToken; // required
  private String clientPlatform; // required
  private String pushToken; // required
  private String clientVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROTOCOL_VERSION((short)1, "protocolVersion"),
    USER_ID((short)2, "userId"),
    DEVICE_ID((short)3, "deviceId"),
    USER_LOGIN((short)4, "userLogin"),
    AUTH_TOKEN((short)5, "authToken"),
    CLIENT_PLATFORM((short)6, "clientPlatform"),
    PUSH_TOKEN((short)7, "pushToken"),
    CLIENT_VERSION((short)8, "clientVersion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // USER_ID
          return USER_ID;
        case 3: // DEVICE_ID
          return DEVICE_ID;
        case 4: // USER_LOGIN
          return USER_LOGIN;
        case 5: // AUTH_TOKEN
          return AUTH_TOKEN;
        case 6: // CLIENT_PLATFORM
          return CLIENT_PLATFORM;
        case 7: // PUSH_TOKEN
          return PUSH_TOKEN;
        case 8: // CLIENT_VERSION
          return CLIENT_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocolVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("userLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("clientPlatform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("pushToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("clientVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftRequestCommonData.class, metaDataMap);
  }

  public ThriftRequestCommonData() {
  }

  public ThriftRequestCommonData(
    String protocolVersion,
    String userId,
    String deviceId,
    String userLogin,
    String authToken,
    String clientPlatform,
    String pushToken,
    String clientVersion)
  {
    this();
    this.protocolVersion = protocolVersion;
    this.userId = userId;
    this.deviceId = deviceId;
    this.userLogin = userLogin;
    this.authToken = authToken;
    this.clientPlatform = clientPlatform;
    this.pushToken = pushToken;
    this.clientVersion = clientVersion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftRequestCommonData(ThriftRequestCommonData other) {
    if (other.isSetProtocolVersion()) {
      this.protocolVersion = other.protocolVersion;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetUserLogin()) {
      this.userLogin = other.userLogin;
    }
    if (other.isSetAuthToken()) {
      this.authToken = other.authToken;
    }
    if (other.isSetClientPlatform()) {
      this.clientPlatform = other.clientPlatform;
    }
    if (other.isSetPushToken()) {
      this.pushToken = other.pushToken;
    }
    if (other.isSetClientVersion()) {
      this.clientVersion = other.clientVersion;
    }
  }

  public ThriftRequestCommonData deepCopy() {
    return new ThriftRequestCommonData(this);
  }

  @Override
  public void clear() {
    this.protocolVersion = null;
    this.userId = null;
    this.deviceId = null;
    this.userLogin = null;
    this.authToken = null;
    this.clientPlatform = null;
    this.pushToken = null;
    this.clientVersion = null;
  }

  public String getProtocolVersion() {
    return this.protocolVersion;
  }

  public ThriftRequestCommonData setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  public void unsetProtocolVersion() {
    this.protocolVersion = null;
  }

  /** Returns true if field protocolVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolVersion() {
    return this.protocolVersion != null;
  }

  public void setProtocolVersionIsSet(boolean value) {
    if (!value) {
      this.protocolVersion = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public ThriftRequestCommonData setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getDeviceId() {
    return this.deviceId;
  }

  public ThriftRequestCommonData setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public String getUserLogin() {
    return this.userLogin;
  }

  public ThriftRequestCommonData setUserLogin(String userLogin) {
    this.userLogin = userLogin;
    return this;
  }

  public void unsetUserLogin() {
    this.userLogin = null;
  }

  /** Returns true if field userLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLogin() {
    return this.userLogin != null;
  }

  public void setUserLoginIsSet(boolean value) {
    if (!value) {
      this.userLogin = null;
    }
  }

  public String getAuthToken() {
    return this.authToken;
  }

  public ThriftRequestCommonData setAuthToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  public void unsetAuthToken() {
    this.authToken = null;
  }

  /** Returns true if field authToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthToken() {
    return this.authToken != null;
  }

  public void setAuthTokenIsSet(boolean value) {
    if (!value) {
      this.authToken = null;
    }
  }

  public String getClientPlatform() {
    return this.clientPlatform;
  }

  public ThriftRequestCommonData setClientPlatform(String clientPlatform) {
    this.clientPlatform = clientPlatform;
    return this;
  }

  public void unsetClientPlatform() {
    this.clientPlatform = null;
  }

  /** Returns true if field clientPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetClientPlatform() {
    return this.clientPlatform != null;
  }

  public void setClientPlatformIsSet(boolean value) {
    if (!value) {
      this.clientPlatform = null;
    }
  }

  public String getPushToken() {
    return this.pushToken;
  }

  public ThriftRequestCommonData setPushToken(String pushToken) {
    this.pushToken = pushToken;
    return this;
  }

  public void unsetPushToken() {
    this.pushToken = null;
  }

  /** Returns true if field pushToken is set (has been assigned a value) and false otherwise */
  public boolean isSetPushToken() {
    return this.pushToken != null;
  }

  public void setPushTokenIsSet(boolean value) {
    if (!value) {
      this.pushToken = null;
    }
  }

  public String getClientVersion() {
    return this.clientVersion;
  }

  public ThriftRequestCommonData setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  public void unsetClientVersion() {
    this.clientVersion = null;
  }

  /** Returns true if field clientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetClientVersion() {
    return this.clientVersion != null;
  }

  public void setClientVersionIsSet(boolean value) {
    if (!value) {
      this.clientVersion = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocolVersion();
      } else {
        setProtocolVersion((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case USER_LOGIN:
      if (value == null) {
        unsetUserLogin();
      } else {
        setUserLogin((String)value);
      }
      break;

    case AUTH_TOKEN:
      if (value == null) {
        unsetAuthToken();
      } else {
        setAuthToken((String)value);
      }
      break;

    case CLIENT_PLATFORM:
      if (value == null) {
        unsetClientPlatform();
      } else {
        setClientPlatform((String)value);
      }
      break;

    case PUSH_TOKEN:
      if (value == null) {
        unsetPushToken();
      } else {
        setPushToken((String)value);
      }
      break;

    case CLIENT_VERSION:
      if (value == null) {
        unsetClientVersion();
      } else {
        setClientVersion((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocolVersion();

    case USER_ID:
      return getUserId();

    case DEVICE_ID:
      return getDeviceId();

    case USER_LOGIN:
      return getUserLogin();

    case AUTH_TOKEN:
      return getAuthToken();

    case CLIENT_PLATFORM:
      return getClientPlatform();

    case PUSH_TOKEN:
      return getPushToken();

    case CLIENT_VERSION:
      return getClientVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocolVersion();
    case USER_ID:
      return isSetUserId();
    case DEVICE_ID:
      return isSetDeviceId();
    case USER_LOGIN:
      return isSetUserLogin();
    case AUTH_TOKEN:
      return isSetAuthToken();
    case CLIENT_PLATFORM:
      return isSetClientPlatform();
    case PUSH_TOKEN:
      return isSetPushToken();
    case CLIENT_VERSION:
      return isSetClientVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftRequestCommonData)
      return this.equals((ThriftRequestCommonData)that);
    return false;
  }

  public boolean equals(ThriftRequestCommonData that) {
    if (that == null)
      return false;

    boolean this_present_protocolVersion = true && this.isSetProtocolVersion();
    boolean that_present_protocolVersion = true && that.isSetProtocolVersion();
    if (this_present_protocolVersion || that_present_protocolVersion) {
      if (!(this_present_protocolVersion && that_present_protocolVersion))
        return false;
      if (!this.protocolVersion.equals(that.protocolVersion))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_userLogin = true && this.isSetUserLogin();
    boolean that_present_userLogin = true && that.isSetUserLogin();
    if (this_present_userLogin || that_present_userLogin) {
      if (!(this_present_userLogin && that_present_userLogin))
        return false;
      if (!this.userLogin.equals(that.userLogin))
        return false;
    }

    boolean this_present_authToken = true && this.isSetAuthToken();
    boolean that_present_authToken = true && that.isSetAuthToken();
    if (this_present_authToken || that_present_authToken) {
      if (!(this_present_authToken && that_present_authToken))
        return false;
      if (!this.authToken.equals(that.authToken))
        return false;
    }

    boolean this_present_clientPlatform = true && this.isSetClientPlatform();
    boolean that_present_clientPlatform = true && that.isSetClientPlatform();
    if (this_present_clientPlatform || that_present_clientPlatform) {
      if (!(this_present_clientPlatform && that_present_clientPlatform))
        return false;
      if (!this.clientPlatform.equals(that.clientPlatform))
        return false;
    }

    boolean this_present_pushToken = true && this.isSetPushToken();
    boolean that_present_pushToken = true && that.isSetPushToken();
    if (this_present_pushToken || that_present_pushToken) {
      if (!(this_present_pushToken && that_present_pushToken))
        return false;
      if (!this.pushToken.equals(that.pushToken))
        return false;
    }

    boolean this_present_clientVersion = true && this.isSetClientVersion();
    boolean that_present_clientVersion = true && that.isSetClientVersion();
    if (this_present_clientVersion || that_present_clientVersion) {
      if (!(this_present_clientVersion && that_present_clientVersion))
        return false;
      if (!this.clientVersion.equals(that.clientVersion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocolVersion = true && (isSetProtocolVersion());
    list.add(present_protocolVersion);
    if (present_protocolVersion)
      list.add(protocolVersion);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_deviceId = true && (isSetDeviceId());
    list.add(present_deviceId);
    if (present_deviceId)
      list.add(deviceId);

    boolean present_userLogin = true && (isSetUserLogin());
    list.add(present_userLogin);
    if (present_userLogin)
      list.add(userLogin);

    boolean present_authToken = true && (isSetAuthToken());
    list.add(present_authToken);
    if (present_authToken)
      list.add(authToken);

    boolean present_clientPlatform = true && (isSetClientPlatform());
    list.add(present_clientPlatform);
    if (present_clientPlatform)
      list.add(clientPlatform);

    boolean present_pushToken = true && (isSetPushToken());
    list.add(present_pushToken);
    if (present_pushToken)
      list.add(pushToken);

    boolean present_clientVersion = true && (isSetClientVersion());
    list.add(present_clientVersion);
    if (present_clientVersion)
      list.add(clientVersion);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftRequestCommonData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocolVersion()).compareTo(other.isSetProtocolVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolVersion, other.protocolVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLogin()).compareTo(other.isSetUserLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLogin, other.userLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthToken()).compareTo(other.isSetAuthToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authToken, other.authToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientPlatform()).compareTo(other.isSetClientPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPlatform, other.clientPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushToken()).compareTo(other.isSetPushToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushToken, other.pushToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientVersion()).compareTo(other.isSetClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientVersion, other.clientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftRequestCommonData(");
    boolean first = true;

    sb.append("protocolVersion:");
    if (this.protocolVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLogin:");
    if (this.userLogin == null) {
      sb.append("null");
    } else {
      sb.append(this.userLogin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authToken:");
    if (this.authToken == null) {
      sb.append("null");
    } else {
      sb.append(this.authToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientPlatform:");
    if (this.clientPlatform == null) {
      sb.append("null");
    } else {
      sb.append(this.clientPlatform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushToken:");
    if (this.pushToken == null) {
      sb.append("null");
    } else {
      sb.append(this.pushToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientVersion:");
    if (this.clientVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.clientVersion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftRequestCommonDataStandardSchemeFactory implements SchemeFactory {
    public ThriftRequestCommonDataStandardScheme getScheme() {
      return new ThriftRequestCommonDataStandardScheme();
    }
  }

  private static class ThriftRequestCommonDataStandardScheme extends StandardScheme<ThriftRequestCommonData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftRequestCommonData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolVersion = iprot.readString();
              struct.setProtocolVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLogin = iprot.readString();
              struct.setUserLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTH_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authToken = iprot.readString();
              struct.setAuthTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientPlatform = iprot.readString();
              struct.setClientPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUSH_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pushToken = iprot.readString();
              struct.setPushTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientVersion = iprot.readString();
              struct.setClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftRequestCommonData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocolVersion != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeString(struct.protocolVersion);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      if (struct.userLogin != null) {
        oprot.writeFieldBegin(USER_LOGIN_FIELD_DESC);
        oprot.writeString(struct.userLogin);
        oprot.writeFieldEnd();
      }
      if (struct.authToken != null) {
        oprot.writeFieldBegin(AUTH_TOKEN_FIELD_DESC);
        oprot.writeString(struct.authToken);
        oprot.writeFieldEnd();
      }
      if (struct.clientPlatform != null) {
        oprot.writeFieldBegin(CLIENT_PLATFORM_FIELD_DESC);
        oprot.writeString(struct.clientPlatform);
        oprot.writeFieldEnd();
      }
      if (struct.pushToken != null) {
        oprot.writeFieldBegin(PUSH_TOKEN_FIELD_DESC);
        oprot.writeString(struct.pushToken);
        oprot.writeFieldEnd();
      }
      if (struct.clientVersion != null) {
        oprot.writeFieldBegin(CLIENT_VERSION_FIELD_DESC);
        oprot.writeString(struct.clientVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftRequestCommonDataTupleSchemeFactory implements SchemeFactory {
    public ThriftRequestCommonDataTupleScheme getScheme() {
      return new ThriftRequestCommonDataTupleScheme();
    }
  }

  private static class ThriftRequestCommonDataTupleScheme extends TupleScheme<ThriftRequestCommonData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftRequestCommonData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProtocolVersion()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(2);
      }
      if (struct.isSetUserLogin()) {
        optionals.set(3);
      }
      if (struct.isSetAuthToken()) {
        optionals.set(4);
      }
      if (struct.isSetClientPlatform()) {
        optionals.set(5);
      }
      if (struct.isSetPushToken()) {
        optionals.set(6);
      }
      if (struct.isSetClientVersion()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetProtocolVersion()) {
        oprot.writeString(struct.protocolVersion);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.deviceId);
      }
      if (struct.isSetUserLogin()) {
        oprot.writeString(struct.userLogin);
      }
      if (struct.isSetAuthToken()) {
        oprot.writeString(struct.authToken);
      }
      if (struct.isSetClientPlatform()) {
        oprot.writeString(struct.clientPlatform);
      }
      if (struct.isSetPushToken()) {
        oprot.writeString(struct.pushToken);
      }
      if (struct.isSetClientVersion()) {
        oprot.writeString(struct.clientVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftRequestCommonData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.protocolVersion = iprot.readString();
        struct.setProtocolVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userLogin = iprot.readString();
        struct.setUserLoginIsSet(true);
      }
      if (incoming.get(4)) {
        struct.authToken = iprot.readString();
        struct.setAuthTokenIsSet(true);
      }
      if (incoming.get(5)) {
        struct.clientPlatform = iprot.readString();
        struct.setClientPlatformIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pushToken = iprot.readString();
        struct.setPushTokenIsSet(true);
      }
      if (incoming.get(7)) {
        struct.clientVersion = iprot.readString();
        struct.setClientVersionIsSet(true);
      }
    }
  }

}

