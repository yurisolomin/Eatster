/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.eatster.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class ThriftMyScoresData implements org.apache.thrift.TBase<ThriftMyScoresData, ThriftMyScoresData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftMyScoresData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftMyScoresData");

  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPENT_FIELD_DESC = new org.apache.thrift.protocol.TField("spent", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BONUS_PERIOD_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bonusPeriodEstimate", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("operations", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftMyScoresDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftMyScoresDataTupleSchemeFactory());
  }

  private int balance; // required
  private int spent; // required
  private int total; // required
  private int bonusPeriodEstimate; // required
  private List<ThriftOperationData> operations; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BALANCE((short)1, "balance"),
    SPENT((short)2, "spent"),
    TOTAL((short)3, "total"),
    BONUS_PERIOD_ESTIMATE((short)4, "bonusPeriodEstimate"),
    OPERATIONS((short)5, "operations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BALANCE
          return BALANCE;
        case 2: // SPENT
          return SPENT;
        case 3: // TOTAL
          return TOTAL;
        case 4: // BONUS_PERIOD_ESTIMATE
          return BONUS_PERIOD_ESTIMATE;
        case 5: // OPERATIONS
          return OPERATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BALANCE_ISSET_ID = 0;
  private static final int __SPENT_ISSET_ID = 1;
  private static final int __TOTAL_ISSET_ID = 2;
  private static final int __BONUSPERIODESTIMATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPENT, new org.apache.thrift.meta_data.FieldMetaData("spent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BONUS_PERIOD_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("bonusPeriodEstimate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATIONS, new org.apache.thrift.meta_data.FieldMetaData("operations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftOperationData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftMyScoresData.class, metaDataMap);
  }

  public ThriftMyScoresData() {
  }

  public ThriftMyScoresData(
    int balance,
    int spent,
    int total,
    int bonusPeriodEstimate,
    List<ThriftOperationData> operations)
  {
    this();
    this.balance = balance;
    setBalanceIsSet(true);
    this.spent = spent;
    setSpentIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.bonusPeriodEstimate = bonusPeriodEstimate;
    setBonusPeriodEstimateIsSet(true);
    this.operations = operations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftMyScoresData(ThriftMyScoresData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.balance = other.balance;
    this.spent = other.spent;
    this.total = other.total;
    this.bonusPeriodEstimate = other.bonusPeriodEstimate;
    if (other.isSetOperations()) {
      List<ThriftOperationData> __this__operations = new ArrayList<ThriftOperationData>(other.operations.size());
      for (ThriftOperationData other_element : other.operations) {
        __this__operations.add(new ThriftOperationData(other_element));
      }
      this.operations = __this__operations;
    }
  }

  public ThriftMyScoresData deepCopy() {
    return new ThriftMyScoresData(this);
  }

  @Override
  public void clear() {
    setBalanceIsSet(false);
    this.balance = 0;
    setSpentIsSet(false);
    this.spent = 0;
    setTotalIsSet(false);
    this.total = 0;
    setBonusPeriodEstimateIsSet(false);
    this.bonusPeriodEstimate = 0;
    this.operations = null;
  }

  public int getBalance() {
    return this.balance;
  }

  public ThriftMyScoresData setBalance(int balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public int getSpent() {
    return this.spent;
  }

  public ThriftMyScoresData setSpent(int spent) {
    this.spent = spent;
    setSpentIsSet(true);
    return this;
  }

  public void unsetSpent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPENT_ISSET_ID);
  }

  /** Returns true if field spent is set (has been assigned a value) and false otherwise */
  public boolean isSetSpent() {
    return EncodingUtils.testBit(__isset_bitfield, __SPENT_ISSET_ID);
  }

  public void setSpentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPENT_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public ThriftMyScoresData setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getBonusPeriodEstimate() {
    return this.bonusPeriodEstimate;
  }

  public ThriftMyScoresData setBonusPeriodEstimate(int bonusPeriodEstimate) {
    this.bonusPeriodEstimate = bonusPeriodEstimate;
    setBonusPeriodEstimateIsSet(true);
    return this;
  }

  public void unsetBonusPeriodEstimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BONUSPERIODESTIMATE_ISSET_ID);
  }

  /** Returns true if field bonusPeriodEstimate is set (has been assigned a value) and false otherwise */
  public boolean isSetBonusPeriodEstimate() {
    return EncodingUtils.testBit(__isset_bitfield, __BONUSPERIODESTIMATE_ISSET_ID);
  }

  public void setBonusPeriodEstimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BONUSPERIODESTIMATE_ISSET_ID, value);
  }

  public int getOperationsSize() {
    return (this.operations == null) ? 0 : this.operations.size();
  }

  public java.util.Iterator<ThriftOperationData> getOperationsIterator() {
    return (this.operations == null) ? null : this.operations.iterator();
  }

  public void addToOperations(ThriftOperationData elem) {
    if (this.operations == null) {
      this.operations = new ArrayList<ThriftOperationData>();
    }
    this.operations.add(elem);
  }

  public List<ThriftOperationData> getOperations() {
    return this.operations;
  }

  public ThriftMyScoresData setOperations(List<ThriftOperationData> operations) {
    this.operations = operations;
    return this;
  }

  public void unsetOperations() {
    this.operations = null;
  }

  /** Returns true if field operations is set (has been assigned a value) and false otherwise */
  public boolean isSetOperations() {
    return this.operations != null;
  }

  public void setOperationsIsSet(boolean value) {
    if (!value) {
      this.operations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Integer)value);
      }
      break;

    case SPENT:
      if (value == null) {
        unsetSpent();
      } else {
        setSpent((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case BONUS_PERIOD_ESTIMATE:
      if (value == null) {
        unsetBonusPeriodEstimate();
      } else {
        setBonusPeriodEstimate((Integer)value);
      }
      break;

    case OPERATIONS:
      if (value == null) {
        unsetOperations();
      } else {
        setOperations((List<ThriftOperationData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BALANCE:
      return Integer.valueOf(getBalance());

    case SPENT:
      return Integer.valueOf(getSpent());

    case TOTAL:
      return Integer.valueOf(getTotal());

    case BONUS_PERIOD_ESTIMATE:
      return Integer.valueOf(getBonusPeriodEstimate());

    case OPERATIONS:
      return getOperations();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BALANCE:
      return isSetBalance();
    case SPENT:
      return isSetSpent();
    case TOTAL:
      return isSetTotal();
    case BONUS_PERIOD_ESTIMATE:
      return isSetBonusPeriodEstimate();
    case OPERATIONS:
      return isSetOperations();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftMyScoresData)
      return this.equals((ThriftMyScoresData)that);
    return false;
  }

  public boolean equals(ThriftMyScoresData that) {
    if (that == null)
      return false;

    boolean this_present_balance = true;
    boolean that_present_balance = true;
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_spent = true;
    boolean that_present_spent = true;
    if (this_present_spent || that_present_spent) {
      if (!(this_present_spent && that_present_spent))
        return false;
      if (this.spent != that.spent)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_bonusPeriodEstimate = true;
    boolean that_present_bonusPeriodEstimate = true;
    if (this_present_bonusPeriodEstimate || that_present_bonusPeriodEstimate) {
      if (!(this_present_bonusPeriodEstimate && that_present_bonusPeriodEstimate))
        return false;
      if (this.bonusPeriodEstimate != that.bonusPeriodEstimate)
        return false;
    }

    boolean this_present_operations = true && this.isSetOperations();
    boolean that_present_operations = true && that.isSetOperations();
    if (this_present_operations || that_present_operations) {
      if (!(this_present_operations && that_present_operations))
        return false;
      if (!this.operations.equals(that.operations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_balance = true;
    list.add(present_balance);
    if (present_balance)
      list.add(balance);

    boolean present_spent = true;
    list.add(present_spent);
    if (present_spent)
      list.add(spent);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_bonusPeriodEstimate = true;
    list.add(present_bonusPeriodEstimate);
    if (present_bonusPeriodEstimate)
      list.add(bonusPeriodEstimate);

    boolean present_operations = true && (isSetOperations());
    list.add(present_operations);
    if (present_operations)
      list.add(operations);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftMyScoresData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpent()).compareTo(other.isSetSpent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spent, other.spent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBonusPeriodEstimate()).compareTo(other.isSetBonusPeriodEstimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBonusPeriodEstimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bonusPeriodEstimate, other.bonusPeriodEstimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperations()).compareTo(other.isSetOperations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operations, other.operations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftMyScoresData(");
    boolean first = true;

    sb.append("balance:");
    sb.append(this.balance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spent:");
    sb.append(this.spent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bonusPeriodEstimate:");
    sb.append(this.bonusPeriodEstimate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operations:");
    if (this.operations == null) {
      sb.append("null");
    } else {
      sb.append(this.operations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftMyScoresDataStandardSchemeFactory implements SchemeFactory {
    public ThriftMyScoresDataStandardScheme getScheme() {
      return new ThriftMyScoresDataStandardScheme();
    }
  }

  private static class ThriftMyScoresDataStandardScheme extends StandardScheme<ThriftMyScoresData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftMyScoresData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.balance = iprot.readI32();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spent = iprot.readI32();
              struct.setSpentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BONUS_PERIOD_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bonusPeriodEstimate = iprot.readI32();
              struct.setBonusPeriodEstimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.operations = new ArrayList<ThriftOperationData>(_list0.size);
                ThriftOperationData _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ThriftOperationData();
                  _elem1.read(iprot);
                  struct.operations.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOperationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftMyScoresData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BALANCE_FIELD_DESC);
      oprot.writeI32(struct.balance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPENT_FIELD_DESC);
      oprot.writeI32(struct.spent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BONUS_PERIOD_ESTIMATE_FIELD_DESC);
      oprot.writeI32(struct.bonusPeriodEstimate);
      oprot.writeFieldEnd();
      if (struct.operations != null) {
        oprot.writeFieldBegin(OPERATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.operations.size()));
          for (ThriftOperationData _iter3 : struct.operations)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftMyScoresDataTupleSchemeFactory implements SchemeFactory {
    public ThriftMyScoresDataTupleScheme getScheme() {
      return new ThriftMyScoresDataTupleScheme();
    }
  }

  private static class ThriftMyScoresDataTupleScheme extends TupleScheme<ThriftMyScoresData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftMyScoresData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBalance()) {
        optionals.set(0);
      }
      if (struct.isSetSpent()) {
        optionals.set(1);
      }
      if (struct.isSetTotal()) {
        optionals.set(2);
      }
      if (struct.isSetBonusPeriodEstimate()) {
        optionals.set(3);
      }
      if (struct.isSetOperations()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBalance()) {
        oprot.writeI32(struct.balance);
      }
      if (struct.isSetSpent()) {
        oprot.writeI32(struct.spent);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetBonusPeriodEstimate()) {
        oprot.writeI32(struct.bonusPeriodEstimate);
      }
      if (struct.isSetOperations()) {
        {
          oprot.writeI32(struct.operations.size());
          for (ThriftOperationData _iter4 : struct.operations)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftMyScoresData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.balance = iprot.readI32();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spent = iprot.readI32();
        struct.setSpentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bonusPeriodEstimate = iprot.readI32();
        struct.setBonusPeriodEstimateIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.operations = new ArrayList<ThriftOperationData>(_list5.size);
          ThriftOperationData _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ThriftOperationData();
            _elem6.read(iprot);
            struct.operations.add(_elem6);
          }
        }
        struct.setOperationsIsSet(true);
      }
    }
  }

}

