/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.eatster.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class ThriftOperationData implements org.apache.thrift.TBase<ThriftOperationData, ThriftOperationData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftOperationData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftOperationData");

  private static final org.apache.thrift.protocol.TField OPER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("operDate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESTAURANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurantId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RESTAURANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurantName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHECK_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkSum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftOperationDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftOperationDataTupleSchemeFactory());
  }

  private String operDate; // required
  private String operTime; // required
  private long restaurantId; // required
  private String restaurantName; // required
  private int checkSum; // required
  private int score; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPER_DATE((short)1, "operDate"),
    OPER_TIME((short)2, "operTime"),
    RESTAURANT_ID((short)3, "restaurantId"),
    RESTAURANT_NAME((short)4, "restaurantName"),
    CHECK_SUM((short)5, "checkSum"),
    SCORE((short)6, "score");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPER_DATE
          return OPER_DATE;
        case 2: // OPER_TIME
          return OPER_TIME;
        case 3: // RESTAURANT_ID
          return RESTAURANT_ID;
        case 4: // RESTAURANT_NAME
          return RESTAURANT_NAME;
        case 5: // CHECK_SUM
          return CHECK_SUM;
        case 6: // SCORE
          return SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESTAURANTID_ISSET_ID = 0;
  private static final int __CHECKSUM_ISSET_ID = 1;
  private static final int __SCORE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPER_DATE, new org.apache.thrift.meta_data.FieldMetaData("operDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPER_TIME, new org.apache.thrift.meta_data.FieldMetaData("operTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESTAURANT_ID, new org.apache.thrift.meta_data.FieldMetaData("restaurantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESTAURANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("restaurantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_SUM, new org.apache.thrift.meta_data.FieldMetaData("checkSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftOperationData.class, metaDataMap);
  }

  public ThriftOperationData() {
  }

  public ThriftOperationData(
    String operDate,
    String operTime,
    long restaurantId,
    String restaurantName,
    int checkSum,
    int score)
  {
    this();
    this.operDate = operDate;
    this.operTime = operTime;
    this.restaurantId = restaurantId;
    setRestaurantIdIsSet(true);
    this.restaurantName = restaurantName;
    this.checkSum = checkSum;
    setCheckSumIsSet(true);
    this.score = score;
    setScoreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftOperationData(ThriftOperationData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOperDate()) {
      this.operDate = other.operDate;
    }
    if (other.isSetOperTime()) {
      this.operTime = other.operTime;
    }
    this.restaurantId = other.restaurantId;
    if (other.isSetRestaurantName()) {
      this.restaurantName = other.restaurantName;
    }
    this.checkSum = other.checkSum;
    this.score = other.score;
  }

  public ThriftOperationData deepCopy() {
    return new ThriftOperationData(this);
  }

  @Override
  public void clear() {
    this.operDate = null;
    this.operTime = null;
    setRestaurantIdIsSet(false);
    this.restaurantId = 0;
    this.restaurantName = null;
    setCheckSumIsSet(false);
    this.checkSum = 0;
    setScoreIsSet(false);
    this.score = 0;
  }

  public String getOperDate() {
    return this.operDate;
  }

  public ThriftOperationData setOperDate(String operDate) {
    this.operDate = operDate;
    return this;
  }

  public void unsetOperDate() {
    this.operDate = null;
  }

  /** Returns true if field operDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOperDate() {
    return this.operDate != null;
  }

  public void setOperDateIsSet(boolean value) {
    if (!value) {
      this.operDate = null;
    }
  }

  public String getOperTime() {
    return this.operTime;
  }

  public ThriftOperationData setOperTime(String operTime) {
    this.operTime = operTime;
    return this;
  }

  public void unsetOperTime() {
    this.operTime = null;
  }

  /** Returns true if field operTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOperTime() {
    return this.operTime != null;
  }

  public void setOperTimeIsSet(boolean value) {
    if (!value) {
      this.operTime = null;
    }
  }

  public long getRestaurantId() {
    return this.restaurantId;
  }

  public ThriftOperationData setRestaurantId(long restaurantId) {
    this.restaurantId = restaurantId;
    setRestaurantIdIsSet(true);
    return this;
  }

  public void unsetRestaurantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESTAURANTID_ISSET_ID);
  }

  /** Returns true if field restaurantId is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurantId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESTAURANTID_ISSET_ID);
  }

  public void setRestaurantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESTAURANTID_ISSET_ID, value);
  }

  public String getRestaurantName() {
    return this.restaurantName;
  }

  public ThriftOperationData setRestaurantName(String restaurantName) {
    this.restaurantName = restaurantName;
    return this;
  }

  public void unsetRestaurantName() {
    this.restaurantName = null;
  }

  /** Returns true if field restaurantName is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurantName() {
    return this.restaurantName != null;
  }

  public void setRestaurantNameIsSet(boolean value) {
    if (!value) {
      this.restaurantName = null;
    }
  }

  public int getCheckSum() {
    return this.checkSum;
  }

  public ThriftOperationData setCheckSum(int checkSum) {
    this.checkSum = checkSum;
    setCheckSumIsSet(true);
    return this;
  }

  public void unsetCheckSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKSUM_ISSET_ID);
  }

  /** Returns true if field checkSum is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckSum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKSUM_ISSET_ID);
  }

  public void setCheckSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKSUM_ISSET_ID, value);
  }

  public int getScore() {
    return this.score;
  }

  public ThriftOperationData setScore(int score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPER_DATE:
      if (value == null) {
        unsetOperDate();
      } else {
        setOperDate((String)value);
      }
      break;

    case OPER_TIME:
      if (value == null) {
        unsetOperTime();
      } else {
        setOperTime((String)value);
      }
      break;

    case RESTAURANT_ID:
      if (value == null) {
        unsetRestaurantId();
      } else {
        setRestaurantId((Long)value);
      }
      break;

    case RESTAURANT_NAME:
      if (value == null) {
        unsetRestaurantName();
      } else {
        setRestaurantName((String)value);
      }
      break;

    case CHECK_SUM:
      if (value == null) {
        unsetCheckSum();
      } else {
        setCheckSum((Integer)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPER_DATE:
      return getOperDate();

    case OPER_TIME:
      return getOperTime();

    case RESTAURANT_ID:
      return Long.valueOf(getRestaurantId());

    case RESTAURANT_NAME:
      return getRestaurantName();

    case CHECK_SUM:
      return Integer.valueOf(getCheckSum());

    case SCORE:
      return Integer.valueOf(getScore());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPER_DATE:
      return isSetOperDate();
    case OPER_TIME:
      return isSetOperTime();
    case RESTAURANT_ID:
      return isSetRestaurantId();
    case RESTAURANT_NAME:
      return isSetRestaurantName();
    case CHECK_SUM:
      return isSetCheckSum();
    case SCORE:
      return isSetScore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftOperationData)
      return this.equals((ThriftOperationData)that);
    return false;
  }

  public boolean equals(ThriftOperationData that) {
    if (that == null)
      return false;

    boolean this_present_operDate = true && this.isSetOperDate();
    boolean that_present_operDate = true && that.isSetOperDate();
    if (this_present_operDate || that_present_operDate) {
      if (!(this_present_operDate && that_present_operDate))
        return false;
      if (!this.operDate.equals(that.operDate))
        return false;
    }

    boolean this_present_operTime = true && this.isSetOperTime();
    boolean that_present_operTime = true && that.isSetOperTime();
    if (this_present_operTime || that_present_operTime) {
      if (!(this_present_operTime && that_present_operTime))
        return false;
      if (!this.operTime.equals(that.operTime))
        return false;
    }

    boolean this_present_restaurantId = true;
    boolean that_present_restaurantId = true;
    if (this_present_restaurantId || that_present_restaurantId) {
      if (!(this_present_restaurantId && that_present_restaurantId))
        return false;
      if (this.restaurantId != that.restaurantId)
        return false;
    }

    boolean this_present_restaurantName = true && this.isSetRestaurantName();
    boolean that_present_restaurantName = true && that.isSetRestaurantName();
    if (this_present_restaurantName || that_present_restaurantName) {
      if (!(this_present_restaurantName && that_present_restaurantName))
        return false;
      if (!this.restaurantName.equals(that.restaurantName))
        return false;
    }

    boolean this_present_checkSum = true;
    boolean that_present_checkSum = true;
    if (this_present_checkSum || that_present_checkSum) {
      if (!(this_present_checkSum && that_present_checkSum))
        return false;
      if (this.checkSum != that.checkSum)
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operDate = true && (isSetOperDate());
    list.add(present_operDate);
    if (present_operDate)
      list.add(operDate);

    boolean present_operTime = true && (isSetOperTime());
    list.add(present_operTime);
    if (present_operTime)
      list.add(operTime);

    boolean present_restaurantId = true;
    list.add(present_restaurantId);
    if (present_restaurantId)
      list.add(restaurantId);

    boolean present_restaurantName = true && (isSetRestaurantName());
    list.add(present_restaurantName);
    if (present_restaurantName)
      list.add(restaurantName);

    boolean present_checkSum = true;
    list.add(present_checkSum);
    if (present_checkSum)
      list.add(checkSum);

    boolean present_score = true;
    list.add(present_score);
    if (present_score)
      list.add(score);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftOperationData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperDate()).compareTo(other.isSetOperDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operDate, other.operDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperTime()).compareTo(other.isSetOperTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operTime, other.operTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurantId()).compareTo(other.isSetRestaurantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurantId, other.restaurantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurantName()).compareTo(other.isSetRestaurantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurantName, other.restaurantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckSum()).compareTo(other.isSetCheckSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkSum, other.checkSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftOperationData(");
    boolean first = true;

    sb.append("operDate:");
    if (this.operDate == null) {
      sb.append("null");
    } else {
      sb.append(this.operDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operTime:");
    if (this.operTime == null) {
      sb.append("null");
    } else {
      sb.append(this.operTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurantId:");
    sb.append(this.restaurantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurantName:");
    if (this.restaurantName == null) {
      sb.append("null");
    } else {
      sb.append(this.restaurantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkSum:");
    sb.append(this.checkSum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftOperationDataStandardSchemeFactory implements SchemeFactory {
    public ThriftOperationDataStandardScheme getScheme() {
      return new ThriftOperationDataStandardScheme();
    }
  }

  private static class ThriftOperationDataStandardScheme extends StandardScheme<ThriftOperationData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftOperationData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operDate = iprot.readString();
              struct.setOperDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operTime = iprot.readString();
              struct.setOperTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESTAURANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.restaurantId = iprot.readI64();
              struct.setRestaurantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESTAURANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.restaurantName = iprot.readString();
              struct.setRestaurantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHECK_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkSum = iprot.readI32();
              struct.setCheckSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.score = iprot.readI32();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftOperationData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.operDate != null) {
        oprot.writeFieldBegin(OPER_DATE_FIELD_DESC);
        oprot.writeString(struct.operDate);
        oprot.writeFieldEnd();
      }
      if (struct.operTime != null) {
        oprot.writeFieldBegin(OPER_TIME_FIELD_DESC);
        oprot.writeString(struct.operTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESTAURANT_ID_FIELD_DESC);
      oprot.writeI64(struct.restaurantId);
      oprot.writeFieldEnd();
      if (struct.restaurantName != null) {
        oprot.writeFieldBegin(RESTAURANT_NAME_FIELD_DESC);
        oprot.writeString(struct.restaurantName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_SUM_FIELD_DESC);
      oprot.writeI32(struct.checkSum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeI32(struct.score);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftOperationDataTupleSchemeFactory implements SchemeFactory {
    public ThriftOperationDataTupleScheme getScheme() {
      return new ThriftOperationDataTupleScheme();
    }
  }

  private static class ThriftOperationDataTupleScheme extends TupleScheme<ThriftOperationData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftOperationData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOperDate()) {
        optionals.set(0);
      }
      if (struct.isSetOperTime()) {
        optionals.set(1);
      }
      if (struct.isSetRestaurantId()) {
        optionals.set(2);
      }
      if (struct.isSetRestaurantName()) {
        optionals.set(3);
      }
      if (struct.isSetCheckSum()) {
        optionals.set(4);
      }
      if (struct.isSetScore()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOperDate()) {
        oprot.writeString(struct.operDate);
      }
      if (struct.isSetOperTime()) {
        oprot.writeString(struct.operTime);
      }
      if (struct.isSetRestaurantId()) {
        oprot.writeI64(struct.restaurantId);
      }
      if (struct.isSetRestaurantName()) {
        oprot.writeString(struct.restaurantName);
      }
      if (struct.isSetCheckSum()) {
        oprot.writeI32(struct.checkSum);
      }
      if (struct.isSetScore()) {
        oprot.writeI32(struct.score);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftOperationData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.operDate = iprot.readString();
        struct.setOperDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operTime = iprot.readString();
        struct.setOperTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.restaurantId = iprot.readI64();
        struct.setRestaurantIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.restaurantName = iprot.readString();
        struct.setRestaurantNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.checkSum = iprot.readI32();
        struct.setCheckSumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.score = iprot.readI32();
        struct.setScoreIsSet(true);
      }
    }
  }

}

