/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.eatster.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class ThriftActionData implements org.apache.thrift.TBase<ThriftActionData, ThriftActionData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftActionData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftActionData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTION_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDescription", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHOTO_FIELD_DESC = new org.apache.thrift.protocol.TField("photo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACTION_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDays", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ACTION_SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionSubType", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftActionDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftActionDataTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private String actionDescription; // required
  private String photo; // required
  private String actionType; // required
  private String startTime; // required
  private String endTime; // required
  private int actionDays; // required
  private String actionSubType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    ACTION_DESCRIPTION((short)3, "actionDescription"),
    PHOTO((short)4, "photo"),
    ACTION_TYPE((short)5, "actionType"),
    START_TIME((short)6, "startTime"),
    END_TIME((short)7, "endTime"),
    ACTION_DAYS((short)8, "actionDays"),
    ACTION_SUB_TYPE((short)9, "actionSubType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // ACTION_DESCRIPTION
          return ACTION_DESCRIPTION;
        case 4: // PHOTO
          return PHOTO;
        case 5: // ACTION_TYPE
          return ACTION_TYPE;
        case 6: // START_TIME
          return START_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 8: // ACTION_DAYS
          return ACTION_DAYS;
        case 9: // ACTION_SUB_TYPE
          return ACTION_SUB_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ACTIONDAYS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("actionDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO, new org.apache.thrift.meta_data.FieldMetaData("photo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_DAYS, new org.apache.thrift.meta_data.FieldMetaData("actionDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionSubType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftActionData.class, metaDataMap);
  }

  public ThriftActionData() {
  }

  public ThriftActionData(
    long id,
    String name,
    String actionDescription,
    String photo,
    String actionType,
    String startTime,
    String endTime,
    int actionDays,
    String actionSubType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.actionDescription = actionDescription;
    this.photo = photo;
    this.actionType = actionType;
    this.startTime = startTime;
    this.endTime = endTime;
    this.actionDays = actionDays;
    setActionDaysIsSet(true);
    this.actionSubType = actionSubType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftActionData(ThriftActionData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetActionDescription()) {
      this.actionDescription = other.actionDescription;
    }
    if (other.isSetPhoto()) {
      this.photo = other.photo;
    }
    if (other.isSetActionType()) {
      this.actionType = other.actionType;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.actionDays = other.actionDays;
    if (other.isSetActionSubType()) {
      this.actionSubType = other.actionSubType;
    }
  }

  public ThriftActionData deepCopy() {
    return new ThriftActionData(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.actionDescription = null;
    this.photo = null;
    this.actionType = null;
    this.startTime = null;
    this.endTime = null;
    setActionDaysIsSet(false);
    this.actionDays = 0;
    this.actionSubType = null;
  }

  public long getId() {
    return this.id;
  }

  public ThriftActionData setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ThriftActionData setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getActionDescription() {
    return this.actionDescription;
  }

  public ThriftActionData setActionDescription(String actionDescription) {
    this.actionDescription = actionDescription;
    return this;
  }

  public void unsetActionDescription() {
    this.actionDescription = null;
  }

  /** Returns true if field actionDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDescription() {
    return this.actionDescription != null;
  }

  public void setActionDescriptionIsSet(boolean value) {
    if (!value) {
      this.actionDescription = null;
    }
  }

  public String getPhoto() {
    return this.photo;
  }

  public ThriftActionData setPhoto(String photo) {
    this.photo = photo;
    return this;
  }

  public void unsetPhoto() {
    this.photo = null;
  }

  /** Returns true if field photo is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoto() {
    return this.photo != null;
  }

  public void setPhotoIsSet(boolean value) {
    if (!value) {
      this.photo = null;
    }
  }

  public String getActionType() {
    return this.actionType;
  }

  public ThriftActionData setActionType(String actionType) {
    this.actionType = actionType;
    return this;
  }

  public void unsetActionType() {
    this.actionType = null;
  }

  /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return this.actionType != null;
  }

  public void setActionTypeIsSet(boolean value) {
    if (!value) {
      this.actionType = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public ThriftActionData setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ThriftActionData setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getActionDays() {
    return this.actionDays;
  }

  public ThriftActionData setActionDays(int actionDays) {
    this.actionDays = actionDays;
    setActionDaysIsSet(true);
    return this;
  }

  public void unsetActionDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONDAYS_ISSET_ID);
  }

  /** Returns true if field actionDays is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDays() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONDAYS_ISSET_ID);
  }

  public void setActionDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONDAYS_ISSET_ID, value);
  }

  public String getActionSubType() {
    return this.actionSubType;
  }

  public ThriftActionData setActionSubType(String actionSubType) {
    this.actionSubType = actionSubType;
    return this;
  }

  public void unsetActionSubType() {
    this.actionSubType = null;
  }

  /** Returns true if field actionSubType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionSubType() {
    return this.actionSubType != null;
  }

  public void setActionSubTypeIsSet(boolean value) {
    if (!value) {
      this.actionSubType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ACTION_DESCRIPTION:
      if (value == null) {
        unsetActionDescription();
      } else {
        setActionDescription((String)value);
      }
      break;

    case PHOTO:
      if (value == null) {
        unsetPhoto();
      } else {
        setPhoto((String)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case ACTION_DAYS:
      if (value == null) {
        unsetActionDays();
      } else {
        setActionDays((Integer)value);
      }
      break;

    case ACTION_SUB_TYPE:
      if (value == null) {
        unsetActionSubType();
      } else {
        setActionSubType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case ACTION_DESCRIPTION:
      return getActionDescription();

    case PHOTO:
      return getPhoto();

    case ACTION_TYPE:
      return getActionType();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case ACTION_DAYS:
      return Integer.valueOf(getActionDays());

    case ACTION_SUB_TYPE:
      return getActionSubType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case ACTION_DESCRIPTION:
      return isSetActionDescription();
    case PHOTO:
      return isSetPhoto();
    case ACTION_TYPE:
      return isSetActionType();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case ACTION_DAYS:
      return isSetActionDays();
    case ACTION_SUB_TYPE:
      return isSetActionSubType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftActionData)
      return this.equals((ThriftActionData)that);
    return false;
  }

  public boolean equals(ThriftActionData that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_actionDescription = true && this.isSetActionDescription();
    boolean that_present_actionDescription = true && that.isSetActionDescription();
    if (this_present_actionDescription || that_present_actionDescription) {
      if (!(this_present_actionDescription && that_present_actionDescription))
        return false;
      if (!this.actionDescription.equals(that.actionDescription))
        return false;
    }

    boolean this_present_photo = true && this.isSetPhoto();
    boolean that_present_photo = true && that.isSetPhoto();
    if (this_present_photo || that_present_photo) {
      if (!(this_present_photo && that_present_photo))
        return false;
      if (!this.photo.equals(that.photo))
        return false;
    }

    boolean this_present_actionType = true && this.isSetActionType();
    boolean that_present_actionType = true && that.isSetActionType();
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (!this.actionType.equals(that.actionType))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_actionDays = true;
    boolean that_present_actionDays = true;
    if (this_present_actionDays || that_present_actionDays) {
      if (!(this_present_actionDays && that_present_actionDays))
        return false;
      if (this.actionDays != that.actionDays)
        return false;
    }

    boolean this_present_actionSubType = true && this.isSetActionSubType();
    boolean that_present_actionSubType = true && that.isSetActionSubType();
    if (this_present_actionSubType || that_present_actionSubType) {
      if (!(this_present_actionSubType && that_present_actionSubType))
        return false;
      if (!this.actionSubType.equals(that.actionSubType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_actionDescription = true && (isSetActionDescription());
    list.add(present_actionDescription);
    if (present_actionDescription)
      list.add(actionDescription);

    boolean present_photo = true && (isSetPhoto());
    list.add(present_photo);
    if (present_photo)
      list.add(photo);

    boolean present_actionType = true && (isSetActionType());
    list.add(present_actionType);
    if (present_actionType)
      list.add(actionType);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_actionDays = true;
    list.add(present_actionDays);
    if (present_actionDays)
      list.add(actionDays);

    boolean present_actionSubType = true && (isSetActionSubType());
    list.add(present_actionSubType);
    if (present_actionSubType)
      list.add(actionSubType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftActionData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDescription()).compareTo(other.isSetActionDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDescription, other.actionDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoto()).compareTo(other.isSetPhoto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photo, other.photo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(other.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionType, other.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDays()).compareTo(other.isSetActionDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDays, other.actionDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionSubType()).compareTo(other.isSetActionSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionSubType, other.actionSubType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftActionData(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionDescription:");
    if (this.actionDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.actionDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photo:");
    if (this.photo == null) {
      sb.append("null");
    } else {
      sb.append(this.photo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionType:");
    if (this.actionType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionDays:");
    sb.append(this.actionDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionSubType:");
    if (this.actionSubType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionSubType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftActionDataStandardSchemeFactory implements SchemeFactory {
    public ThriftActionDataStandardScheme getScheme() {
      return new ThriftActionDataStandardScheme();
    }
  }

  private static class ThriftActionDataStandardScheme extends StandardScheme<ThriftActionData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftActionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTION_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionDescription = iprot.readString();
              struct.setActionDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHOTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photo = iprot.readString();
              struct.setPhotoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionType = iprot.readString();
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTION_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionDays = iprot.readI32();
              struct.setActionDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTION_SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionSubType = iprot.readString();
              struct.setActionSubTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftActionData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.actionDescription != null) {
        oprot.writeFieldBegin(ACTION_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.actionDescription);
        oprot.writeFieldEnd();
      }
      if (struct.photo != null) {
        oprot.writeFieldBegin(PHOTO_FIELD_DESC);
        oprot.writeString(struct.photo);
        oprot.writeFieldEnd();
      }
      if (struct.actionType != null) {
        oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.actionType);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTION_DAYS_FIELD_DESC);
      oprot.writeI32(struct.actionDays);
      oprot.writeFieldEnd();
      if (struct.actionSubType != null) {
        oprot.writeFieldBegin(ACTION_SUB_TYPE_FIELD_DESC);
        oprot.writeString(struct.actionSubType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftActionDataTupleSchemeFactory implements SchemeFactory {
    public ThriftActionDataTupleScheme getScheme() {
      return new ThriftActionDataTupleScheme();
    }
  }

  private static class ThriftActionDataTupleScheme extends TupleScheme<ThriftActionData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftActionData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetActionDescription()) {
        optionals.set(2);
      }
      if (struct.isSetPhoto()) {
        optionals.set(3);
      }
      if (struct.isSetActionType()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetActionDays()) {
        optionals.set(7);
      }
      if (struct.isSetActionSubType()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetActionDescription()) {
        oprot.writeString(struct.actionDescription);
      }
      if (struct.isSetPhoto()) {
        oprot.writeString(struct.photo);
      }
      if (struct.isSetActionType()) {
        oprot.writeString(struct.actionType);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetActionDays()) {
        oprot.writeI32(struct.actionDays);
      }
      if (struct.isSetActionSubType()) {
        oprot.writeString(struct.actionSubType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftActionData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.actionDescription = iprot.readString();
        struct.setActionDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.photo = iprot.readString();
        struct.setPhotoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.actionType = iprot.readString();
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.actionDays = iprot.readI32();
        struct.setActionDaysIsSet(true);
      }
      if (incoming.get(8)) {
        struct.actionSubType = iprot.readString();
        struct.setActionSubTypeIsSet(true);
      }
    }
  }

}

