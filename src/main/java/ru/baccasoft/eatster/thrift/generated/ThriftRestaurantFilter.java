/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.eatster.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class ThriftRestaurantFilter implements org.apache.thrift.TBase<ThriftRestaurantFilter, ThriftRestaurantFilter._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftRestaurantFilter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftRestaurantFilter");

  private static final org.apache.thrift.protocol.TField SUBWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subwayId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AVERAGE_CHECK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("averageCheckId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTypeId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CUISINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cuisineId", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftRestaurantFilterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftRestaurantFilterTupleSchemeFactory());
  }

  private long subwayId; // required
  private long averageCheckId; // required
  private long actionTypeId; // required
  private long cuisineId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBWAY_ID((short)1, "subwayId"),
    AVERAGE_CHECK_ID((short)2, "averageCheckId"),
    ACTION_TYPE_ID((short)3, "actionTypeId"),
    CUISINE_ID((short)4, "cuisineId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBWAY_ID
          return SUBWAY_ID;
        case 2: // AVERAGE_CHECK_ID
          return AVERAGE_CHECK_ID;
        case 3: // ACTION_TYPE_ID
          return ACTION_TYPE_ID;
        case 4: // CUISINE_ID
          return CUISINE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBWAYID_ISSET_ID = 0;
  private static final int __AVERAGECHECKID_ISSET_ID = 1;
  private static final int __ACTIONTYPEID_ISSET_ID = 2;
  private static final int __CUISINEID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBWAY_ID, new org.apache.thrift.meta_data.FieldMetaData("subwayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVERAGE_CHECK_ID, new org.apache.thrift.meta_data.FieldMetaData("averageCheckId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTION_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("actionTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CUISINE_ID, new org.apache.thrift.meta_data.FieldMetaData("cuisineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftRestaurantFilter.class, metaDataMap);
  }

  public ThriftRestaurantFilter() {
  }

  public ThriftRestaurantFilter(
    long subwayId,
    long averageCheckId,
    long actionTypeId,
    long cuisineId)
  {
    this();
    this.subwayId = subwayId;
    setSubwayIdIsSet(true);
    this.averageCheckId = averageCheckId;
    setAverageCheckIdIsSet(true);
    this.actionTypeId = actionTypeId;
    setActionTypeIdIsSet(true);
    this.cuisineId = cuisineId;
    setCuisineIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftRestaurantFilter(ThriftRestaurantFilter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subwayId = other.subwayId;
    this.averageCheckId = other.averageCheckId;
    this.actionTypeId = other.actionTypeId;
    this.cuisineId = other.cuisineId;
  }

  public ThriftRestaurantFilter deepCopy() {
    return new ThriftRestaurantFilter(this);
  }

  @Override
  public void clear() {
    setSubwayIdIsSet(false);
    this.subwayId = 0;
    setAverageCheckIdIsSet(false);
    this.averageCheckId = 0;
    setActionTypeIdIsSet(false);
    this.actionTypeId = 0;
    setCuisineIdIsSet(false);
    this.cuisineId = 0;
  }

  public long getSubwayId() {
    return this.subwayId;
  }

  public ThriftRestaurantFilter setSubwayId(long subwayId) {
    this.subwayId = subwayId;
    setSubwayIdIsSet(true);
    return this;
  }

  public void unsetSubwayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBWAYID_ISSET_ID);
  }

  /** Returns true if field subwayId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubwayId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBWAYID_ISSET_ID);
  }

  public void setSubwayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBWAYID_ISSET_ID, value);
  }

  public long getAverageCheckId() {
    return this.averageCheckId;
  }

  public ThriftRestaurantFilter setAverageCheckId(long averageCheckId) {
    this.averageCheckId = averageCheckId;
    setAverageCheckIdIsSet(true);
    return this;
  }

  public void unsetAverageCheckId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGECHECKID_ISSET_ID);
  }

  /** Returns true if field averageCheckId is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageCheckId() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGECHECKID_ISSET_ID);
  }

  public void setAverageCheckIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGECHECKID_ISSET_ID, value);
  }

  public long getActionTypeId() {
    return this.actionTypeId;
  }

  public ThriftRestaurantFilter setActionTypeId(long actionTypeId) {
    this.actionTypeId = actionTypeId;
    setActionTypeIdIsSet(true);
    return this;
  }

  public void unsetActionTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONTYPEID_ISSET_ID);
  }

  /** Returns true if field actionTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActionTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONTYPEID_ISSET_ID);
  }

  public void setActionTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONTYPEID_ISSET_ID, value);
  }

  public long getCuisineId() {
    return this.cuisineId;
  }

  public ThriftRestaurantFilter setCuisineId(long cuisineId) {
    this.cuisineId = cuisineId;
    setCuisineIdIsSet(true);
    return this;
  }

  public void unsetCuisineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUISINEID_ISSET_ID);
  }

  /** Returns true if field cuisineId is set (has been assigned a value) and false otherwise */
  public boolean isSetCuisineId() {
    return EncodingUtils.testBit(__isset_bitfield, __CUISINEID_ISSET_ID);
  }

  public void setCuisineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUISINEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBWAY_ID:
      if (value == null) {
        unsetSubwayId();
      } else {
        setSubwayId((Long)value);
      }
      break;

    case AVERAGE_CHECK_ID:
      if (value == null) {
        unsetAverageCheckId();
      } else {
        setAverageCheckId((Long)value);
      }
      break;

    case ACTION_TYPE_ID:
      if (value == null) {
        unsetActionTypeId();
      } else {
        setActionTypeId((Long)value);
      }
      break;

    case CUISINE_ID:
      if (value == null) {
        unsetCuisineId();
      } else {
        setCuisineId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBWAY_ID:
      return Long.valueOf(getSubwayId());

    case AVERAGE_CHECK_ID:
      return Long.valueOf(getAverageCheckId());

    case ACTION_TYPE_ID:
      return Long.valueOf(getActionTypeId());

    case CUISINE_ID:
      return Long.valueOf(getCuisineId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBWAY_ID:
      return isSetSubwayId();
    case AVERAGE_CHECK_ID:
      return isSetAverageCheckId();
    case ACTION_TYPE_ID:
      return isSetActionTypeId();
    case CUISINE_ID:
      return isSetCuisineId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftRestaurantFilter)
      return this.equals((ThriftRestaurantFilter)that);
    return false;
  }

  public boolean equals(ThriftRestaurantFilter that) {
    if (that == null)
      return false;

    boolean this_present_subwayId = true;
    boolean that_present_subwayId = true;
    if (this_present_subwayId || that_present_subwayId) {
      if (!(this_present_subwayId && that_present_subwayId))
        return false;
      if (this.subwayId != that.subwayId)
        return false;
    }

    boolean this_present_averageCheckId = true;
    boolean that_present_averageCheckId = true;
    if (this_present_averageCheckId || that_present_averageCheckId) {
      if (!(this_present_averageCheckId && that_present_averageCheckId))
        return false;
      if (this.averageCheckId != that.averageCheckId)
        return false;
    }

    boolean this_present_actionTypeId = true;
    boolean that_present_actionTypeId = true;
    if (this_present_actionTypeId || that_present_actionTypeId) {
      if (!(this_present_actionTypeId && that_present_actionTypeId))
        return false;
      if (this.actionTypeId != that.actionTypeId)
        return false;
    }

    boolean this_present_cuisineId = true;
    boolean that_present_cuisineId = true;
    if (this_present_cuisineId || that_present_cuisineId) {
      if (!(this_present_cuisineId && that_present_cuisineId))
        return false;
      if (this.cuisineId != that.cuisineId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_subwayId = true;
    list.add(present_subwayId);
    if (present_subwayId)
      list.add(subwayId);

    boolean present_averageCheckId = true;
    list.add(present_averageCheckId);
    if (present_averageCheckId)
      list.add(averageCheckId);

    boolean present_actionTypeId = true;
    list.add(present_actionTypeId);
    if (present_actionTypeId)
      list.add(actionTypeId);

    boolean present_cuisineId = true;
    list.add(present_cuisineId);
    if (present_cuisineId)
      list.add(cuisineId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftRestaurantFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubwayId()).compareTo(other.isSetSubwayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubwayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subwayId, other.subwayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageCheckId()).compareTo(other.isSetAverageCheckId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageCheckId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageCheckId, other.averageCheckId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionTypeId()).compareTo(other.isSetActionTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTypeId, other.actionTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCuisineId()).compareTo(other.isSetCuisineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCuisineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cuisineId, other.cuisineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftRestaurantFilter(");
    boolean first = true;

    sb.append("subwayId:");
    sb.append(this.subwayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageCheckId:");
    sb.append(this.averageCheckId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionTypeId:");
    sb.append(this.actionTypeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cuisineId:");
    sb.append(this.cuisineId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftRestaurantFilterStandardSchemeFactory implements SchemeFactory {
    public ThriftRestaurantFilterStandardScheme getScheme() {
      return new ThriftRestaurantFilterStandardScheme();
    }
  }

  private static class ThriftRestaurantFilterStandardScheme extends StandardScheme<ThriftRestaurantFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftRestaurantFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBWAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subwayId = iprot.readI64();
              struct.setSubwayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVERAGE_CHECK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.averageCheckId = iprot.readI64();
              struct.setAverageCheckIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTION_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.actionTypeId = iprot.readI64();
              struct.setActionTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUISINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cuisineId = iprot.readI64();
              struct.setCuisineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftRestaurantFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUBWAY_ID_FIELD_DESC);
      oprot.writeI64(struct.subwayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_CHECK_ID_FIELD_DESC);
      oprot.writeI64(struct.averageCheckId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_TYPE_ID_FIELD_DESC);
      oprot.writeI64(struct.actionTypeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUISINE_ID_FIELD_DESC);
      oprot.writeI64(struct.cuisineId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftRestaurantFilterTupleSchemeFactory implements SchemeFactory {
    public ThriftRestaurantFilterTupleScheme getScheme() {
      return new ThriftRestaurantFilterTupleScheme();
    }
  }

  private static class ThriftRestaurantFilterTupleScheme extends TupleScheme<ThriftRestaurantFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftRestaurantFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubwayId()) {
        optionals.set(0);
      }
      if (struct.isSetAverageCheckId()) {
        optionals.set(1);
      }
      if (struct.isSetActionTypeId()) {
        optionals.set(2);
      }
      if (struct.isSetCuisineId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSubwayId()) {
        oprot.writeI64(struct.subwayId);
      }
      if (struct.isSetAverageCheckId()) {
        oprot.writeI64(struct.averageCheckId);
      }
      if (struct.isSetActionTypeId()) {
        oprot.writeI64(struct.actionTypeId);
      }
      if (struct.isSetCuisineId()) {
        oprot.writeI64(struct.cuisineId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftRestaurantFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.subwayId = iprot.readI64();
        struct.setSubwayIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.averageCheckId = iprot.readI64();
        struct.setAverageCheckIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.actionTypeId = iprot.readI64();
        struct.setActionTypeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cuisineId = iprot.readI64();
        struct.setCuisineIdIsSet(true);
      }
    }
  }

}

