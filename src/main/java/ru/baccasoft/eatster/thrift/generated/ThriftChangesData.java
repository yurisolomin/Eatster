/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.eatster.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class ThriftChangesData implements org.apache.thrift.TBase<ThriftChangesData, ThriftChangesData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftChangesData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftChangesData");

  private static final org.apache.thrift.protocol.TField CHANGED_SUBWAY_FIELD_DESC = new org.apache.thrift.protocol.TField("changedSubway", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CHANGED_AVERAGE_CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("changedAverageCheck", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CHANGED_ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("changedActionType", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CHANGED_CUISINE_FIELD_DESC = new org.apache.thrift.protocol.TField("changedCuisine", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftChangesDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftChangesDataTupleSchemeFactory());
  }

  private List<ThriftSubwayData> changedSubway; // required
  private List<ThriftAverageCheckData> changedAverageCheck; // required
  private List<ThriftActionTypeData> changedActionType; // required
  private List<ThriftCuisineData> changedCuisine; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANGED_SUBWAY((short)1, "changedSubway"),
    CHANGED_AVERAGE_CHECK((short)2, "changedAverageCheck"),
    CHANGED_ACTION_TYPE((short)3, "changedActionType"),
    CHANGED_CUISINE((short)4, "changedCuisine");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANGED_SUBWAY
          return CHANGED_SUBWAY;
        case 2: // CHANGED_AVERAGE_CHECK
          return CHANGED_AVERAGE_CHECK;
        case 3: // CHANGED_ACTION_TYPE
          return CHANGED_ACTION_TYPE;
        case 4: // CHANGED_CUISINE
          return CHANGED_CUISINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANGED_SUBWAY, new org.apache.thrift.meta_data.FieldMetaData("changedSubway", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSubwayData.class))));
    tmpMap.put(_Fields.CHANGED_AVERAGE_CHECK, new org.apache.thrift.meta_data.FieldMetaData("changedAverageCheck", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAverageCheckData.class))));
    tmpMap.put(_Fields.CHANGED_ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("changedActionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftActionTypeData.class))));
    tmpMap.put(_Fields.CHANGED_CUISINE, new org.apache.thrift.meta_data.FieldMetaData("changedCuisine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCuisineData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftChangesData.class, metaDataMap);
  }

  public ThriftChangesData() {
  }

  public ThriftChangesData(
    List<ThriftSubwayData> changedSubway,
    List<ThriftAverageCheckData> changedAverageCheck,
    List<ThriftActionTypeData> changedActionType,
    List<ThriftCuisineData> changedCuisine)
  {
    this();
    this.changedSubway = changedSubway;
    this.changedAverageCheck = changedAverageCheck;
    this.changedActionType = changedActionType;
    this.changedCuisine = changedCuisine;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftChangesData(ThriftChangesData other) {
    if (other.isSetChangedSubway()) {
      List<ThriftSubwayData> __this__changedSubway = new ArrayList<ThriftSubwayData>(other.changedSubway.size());
      for (ThriftSubwayData other_element : other.changedSubway) {
        __this__changedSubway.add(new ThriftSubwayData(other_element));
      }
      this.changedSubway = __this__changedSubway;
    }
    if (other.isSetChangedAverageCheck()) {
      List<ThriftAverageCheckData> __this__changedAverageCheck = new ArrayList<ThriftAverageCheckData>(other.changedAverageCheck.size());
      for (ThriftAverageCheckData other_element : other.changedAverageCheck) {
        __this__changedAverageCheck.add(new ThriftAverageCheckData(other_element));
      }
      this.changedAverageCheck = __this__changedAverageCheck;
    }
    if (other.isSetChangedActionType()) {
      List<ThriftActionTypeData> __this__changedActionType = new ArrayList<ThriftActionTypeData>(other.changedActionType.size());
      for (ThriftActionTypeData other_element : other.changedActionType) {
        __this__changedActionType.add(new ThriftActionTypeData(other_element));
      }
      this.changedActionType = __this__changedActionType;
    }
    if (other.isSetChangedCuisine()) {
      List<ThriftCuisineData> __this__changedCuisine = new ArrayList<ThriftCuisineData>(other.changedCuisine.size());
      for (ThriftCuisineData other_element : other.changedCuisine) {
        __this__changedCuisine.add(new ThriftCuisineData(other_element));
      }
      this.changedCuisine = __this__changedCuisine;
    }
  }

  public ThriftChangesData deepCopy() {
    return new ThriftChangesData(this);
  }

  @Override
  public void clear() {
    this.changedSubway = null;
    this.changedAverageCheck = null;
    this.changedActionType = null;
    this.changedCuisine = null;
  }

  public int getChangedSubwaySize() {
    return (this.changedSubway == null) ? 0 : this.changedSubway.size();
  }

  public java.util.Iterator<ThriftSubwayData> getChangedSubwayIterator() {
    return (this.changedSubway == null) ? null : this.changedSubway.iterator();
  }

  public void addToChangedSubway(ThriftSubwayData elem) {
    if (this.changedSubway == null) {
      this.changedSubway = new ArrayList<ThriftSubwayData>();
    }
    this.changedSubway.add(elem);
  }

  public List<ThriftSubwayData> getChangedSubway() {
    return this.changedSubway;
  }

  public ThriftChangesData setChangedSubway(List<ThriftSubwayData> changedSubway) {
    this.changedSubway = changedSubway;
    return this;
  }

  public void unsetChangedSubway() {
    this.changedSubway = null;
  }

  /** Returns true if field changedSubway is set (has been assigned a value) and false otherwise */
  public boolean isSetChangedSubway() {
    return this.changedSubway != null;
  }

  public void setChangedSubwayIsSet(boolean value) {
    if (!value) {
      this.changedSubway = null;
    }
  }

  public int getChangedAverageCheckSize() {
    return (this.changedAverageCheck == null) ? 0 : this.changedAverageCheck.size();
  }

  public java.util.Iterator<ThriftAverageCheckData> getChangedAverageCheckIterator() {
    return (this.changedAverageCheck == null) ? null : this.changedAverageCheck.iterator();
  }

  public void addToChangedAverageCheck(ThriftAverageCheckData elem) {
    if (this.changedAverageCheck == null) {
      this.changedAverageCheck = new ArrayList<ThriftAverageCheckData>();
    }
    this.changedAverageCheck.add(elem);
  }

  public List<ThriftAverageCheckData> getChangedAverageCheck() {
    return this.changedAverageCheck;
  }

  public ThriftChangesData setChangedAverageCheck(List<ThriftAverageCheckData> changedAverageCheck) {
    this.changedAverageCheck = changedAverageCheck;
    return this;
  }

  public void unsetChangedAverageCheck() {
    this.changedAverageCheck = null;
  }

  /** Returns true if field changedAverageCheck is set (has been assigned a value) and false otherwise */
  public boolean isSetChangedAverageCheck() {
    return this.changedAverageCheck != null;
  }

  public void setChangedAverageCheckIsSet(boolean value) {
    if (!value) {
      this.changedAverageCheck = null;
    }
  }

  public int getChangedActionTypeSize() {
    return (this.changedActionType == null) ? 0 : this.changedActionType.size();
  }

  public java.util.Iterator<ThriftActionTypeData> getChangedActionTypeIterator() {
    return (this.changedActionType == null) ? null : this.changedActionType.iterator();
  }

  public void addToChangedActionType(ThriftActionTypeData elem) {
    if (this.changedActionType == null) {
      this.changedActionType = new ArrayList<ThriftActionTypeData>();
    }
    this.changedActionType.add(elem);
  }

  public List<ThriftActionTypeData> getChangedActionType() {
    return this.changedActionType;
  }

  public ThriftChangesData setChangedActionType(List<ThriftActionTypeData> changedActionType) {
    this.changedActionType = changedActionType;
    return this;
  }

  public void unsetChangedActionType() {
    this.changedActionType = null;
  }

  /** Returns true if field changedActionType is set (has been assigned a value) and false otherwise */
  public boolean isSetChangedActionType() {
    return this.changedActionType != null;
  }

  public void setChangedActionTypeIsSet(boolean value) {
    if (!value) {
      this.changedActionType = null;
    }
  }

  public int getChangedCuisineSize() {
    return (this.changedCuisine == null) ? 0 : this.changedCuisine.size();
  }

  public java.util.Iterator<ThriftCuisineData> getChangedCuisineIterator() {
    return (this.changedCuisine == null) ? null : this.changedCuisine.iterator();
  }

  public void addToChangedCuisine(ThriftCuisineData elem) {
    if (this.changedCuisine == null) {
      this.changedCuisine = new ArrayList<ThriftCuisineData>();
    }
    this.changedCuisine.add(elem);
  }

  public List<ThriftCuisineData> getChangedCuisine() {
    return this.changedCuisine;
  }

  public ThriftChangesData setChangedCuisine(List<ThriftCuisineData> changedCuisine) {
    this.changedCuisine = changedCuisine;
    return this;
  }

  public void unsetChangedCuisine() {
    this.changedCuisine = null;
  }

  /** Returns true if field changedCuisine is set (has been assigned a value) and false otherwise */
  public boolean isSetChangedCuisine() {
    return this.changedCuisine != null;
  }

  public void setChangedCuisineIsSet(boolean value) {
    if (!value) {
      this.changedCuisine = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHANGED_SUBWAY:
      if (value == null) {
        unsetChangedSubway();
      } else {
        setChangedSubway((List<ThriftSubwayData>)value);
      }
      break;

    case CHANGED_AVERAGE_CHECK:
      if (value == null) {
        unsetChangedAverageCheck();
      } else {
        setChangedAverageCheck((List<ThriftAverageCheckData>)value);
      }
      break;

    case CHANGED_ACTION_TYPE:
      if (value == null) {
        unsetChangedActionType();
      } else {
        setChangedActionType((List<ThriftActionTypeData>)value);
      }
      break;

    case CHANGED_CUISINE:
      if (value == null) {
        unsetChangedCuisine();
      } else {
        setChangedCuisine((List<ThriftCuisineData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANGED_SUBWAY:
      return getChangedSubway();

    case CHANGED_AVERAGE_CHECK:
      return getChangedAverageCheck();

    case CHANGED_ACTION_TYPE:
      return getChangedActionType();

    case CHANGED_CUISINE:
      return getChangedCuisine();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHANGED_SUBWAY:
      return isSetChangedSubway();
    case CHANGED_AVERAGE_CHECK:
      return isSetChangedAverageCheck();
    case CHANGED_ACTION_TYPE:
      return isSetChangedActionType();
    case CHANGED_CUISINE:
      return isSetChangedCuisine();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftChangesData)
      return this.equals((ThriftChangesData)that);
    return false;
  }

  public boolean equals(ThriftChangesData that) {
    if (that == null)
      return false;

    boolean this_present_changedSubway = true && this.isSetChangedSubway();
    boolean that_present_changedSubway = true && that.isSetChangedSubway();
    if (this_present_changedSubway || that_present_changedSubway) {
      if (!(this_present_changedSubway && that_present_changedSubway))
        return false;
      if (!this.changedSubway.equals(that.changedSubway))
        return false;
    }

    boolean this_present_changedAverageCheck = true && this.isSetChangedAverageCheck();
    boolean that_present_changedAverageCheck = true && that.isSetChangedAverageCheck();
    if (this_present_changedAverageCheck || that_present_changedAverageCheck) {
      if (!(this_present_changedAverageCheck && that_present_changedAverageCheck))
        return false;
      if (!this.changedAverageCheck.equals(that.changedAverageCheck))
        return false;
    }

    boolean this_present_changedActionType = true && this.isSetChangedActionType();
    boolean that_present_changedActionType = true && that.isSetChangedActionType();
    if (this_present_changedActionType || that_present_changedActionType) {
      if (!(this_present_changedActionType && that_present_changedActionType))
        return false;
      if (!this.changedActionType.equals(that.changedActionType))
        return false;
    }

    boolean this_present_changedCuisine = true && this.isSetChangedCuisine();
    boolean that_present_changedCuisine = true && that.isSetChangedCuisine();
    if (this_present_changedCuisine || that_present_changedCuisine) {
      if (!(this_present_changedCuisine && that_present_changedCuisine))
        return false;
      if (!this.changedCuisine.equals(that.changedCuisine))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_changedSubway = true && (isSetChangedSubway());
    list.add(present_changedSubway);
    if (present_changedSubway)
      list.add(changedSubway);

    boolean present_changedAverageCheck = true && (isSetChangedAverageCheck());
    list.add(present_changedAverageCheck);
    if (present_changedAverageCheck)
      list.add(changedAverageCheck);

    boolean present_changedActionType = true && (isSetChangedActionType());
    list.add(present_changedActionType);
    if (present_changedActionType)
      list.add(changedActionType);

    boolean present_changedCuisine = true && (isSetChangedCuisine());
    list.add(present_changedCuisine);
    if (present_changedCuisine)
      list.add(changedCuisine);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftChangesData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChangedSubway()).compareTo(other.isSetChangedSubway());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangedSubway()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changedSubway, other.changedSubway);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChangedAverageCheck()).compareTo(other.isSetChangedAverageCheck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangedAverageCheck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changedAverageCheck, other.changedAverageCheck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChangedActionType()).compareTo(other.isSetChangedActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangedActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changedActionType, other.changedActionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChangedCuisine()).compareTo(other.isSetChangedCuisine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangedCuisine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changedCuisine, other.changedCuisine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftChangesData(");
    boolean first = true;

    sb.append("changedSubway:");
    if (this.changedSubway == null) {
      sb.append("null");
    } else {
      sb.append(this.changedSubway);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("changedAverageCheck:");
    if (this.changedAverageCheck == null) {
      sb.append("null");
    } else {
      sb.append(this.changedAverageCheck);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("changedActionType:");
    if (this.changedActionType == null) {
      sb.append("null");
    } else {
      sb.append(this.changedActionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("changedCuisine:");
    if (this.changedCuisine == null) {
      sb.append("null");
    } else {
      sb.append(this.changedCuisine);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftChangesDataStandardSchemeFactory implements SchemeFactory {
    public ThriftChangesDataStandardScheme getScheme() {
      return new ThriftChangesDataStandardScheme();
    }
  }

  private static class ThriftChangesDataStandardScheme extends StandardScheme<ThriftChangesData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftChangesData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANGED_SUBWAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.changedSubway = new ArrayList<ThriftSubwayData>(_list40.size);
                ThriftSubwayData _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new ThriftSubwayData();
                  _elem41.read(iprot);
                  struct.changedSubway.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setChangedSubwayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANGED_AVERAGE_CHECK
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.changedAverageCheck = new ArrayList<ThriftAverageCheckData>(_list43.size);
                ThriftAverageCheckData _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new ThriftAverageCheckData();
                  _elem44.read(iprot);
                  struct.changedAverageCheck.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setChangedAverageCheckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANGED_ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.changedActionType = new ArrayList<ThriftActionTypeData>(_list46.size);
                ThriftActionTypeData _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = new ThriftActionTypeData();
                  _elem47.read(iprot);
                  struct.changedActionType.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setChangedActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANGED_CUISINE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.changedCuisine = new ArrayList<ThriftCuisineData>(_list49.size);
                ThriftCuisineData _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = new ThriftCuisineData();
                  _elem50.read(iprot);
                  struct.changedCuisine.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setChangedCuisineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftChangesData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.changedSubway != null) {
        oprot.writeFieldBegin(CHANGED_SUBWAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.changedSubway.size()));
          for (ThriftSubwayData _iter52 : struct.changedSubway)
          {
            _iter52.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.changedAverageCheck != null) {
        oprot.writeFieldBegin(CHANGED_AVERAGE_CHECK_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.changedAverageCheck.size()));
          for (ThriftAverageCheckData _iter53 : struct.changedAverageCheck)
          {
            _iter53.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.changedActionType != null) {
        oprot.writeFieldBegin(CHANGED_ACTION_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.changedActionType.size()));
          for (ThriftActionTypeData _iter54 : struct.changedActionType)
          {
            _iter54.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.changedCuisine != null) {
        oprot.writeFieldBegin(CHANGED_CUISINE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.changedCuisine.size()));
          for (ThriftCuisineData _iter55 : struct.changedCuisine)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftChangesDataTupleSchemeFactory implements SchemeFactory {
    public ThriftChangesDataTupleScheme getScheme() {
      return new ThriftChangesDataTupleScheme();
    }
  }

  private static class ThriftChangesDataTupleScheme extends TupleScheme<ThriftChangesData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftChangesData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChangedSubway()) {
        optionals.set(0);
      }
      if (struct.isSetChangedAverageCheck()) {
        optionals.set(1);
      }
      if (struct.isSetChangedActionType()) {
        optionals.set(2);
      }
      if (struct.isSetChangedCuisine()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetChangedSubway()) {
        {
          oprot.writeI32(struct.changedSubway.size());
          for (ThriftSubwayData _iter56 : struct.changedSubway)
          {
            _iter56.write(oprot);
          }
        }
      }
      if (struct.isSetChangedAverageCheck()) {
        {
          oprot.writeI32(struct.changedAverageCheck.size());
          for (ThriftAverageCheckData _iter57 : struct.changedAverageCheck)
          {
            _iter57.write(oprot);
          }
        }
      }
      if (struct.isSetChangedActionType()) {
        {
          oprot.writeI32(struct.changedActionType.size());
          for (ThriftActionTypeData _iter58 : struct.changedActionType)
          {
            _iter58.write(oprot);
          }
        }
      }
      if (struct.isSetChangedCuisine()) {
        {
          oprot.writeI32(struct.changedCuisine.size());
          for (ThriftCuisineData _iter59 : struct.changedCuisine)
          {
            _iter59.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftChangesData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.changedSubway = new ArrayList<ThriftSubwayData>(_list60.size);
          ThriftSubwayData _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = new ThriftSubwayData();
            _elem61.read(iprot);
            struct.changedSubway.add(_elem61);
          }
        }
        struct.setChangedSubwayIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.changedAverageCheck = new ArrayList<ThriftAverageCheckData>(_list63.size);
          ThriftAverageCheckData _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = new ThriftAverageCheckData();
            _elem64.read(iprot);
            struct.changedAverageCheck.add(_elem64);
          }
        }
        struct.setChangedAverageCheckIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.changedActionType = new ArrayList<ThriftActionTypeData>(_list66.size);
          ThriftActionTypeData _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = new ThriftActionTypeData();
            _elem67.read(iprot);
            struct.changedActionType.add(_elem67);
          }
        }
        struct.setChangedActionTypeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.changedCuisine = new ArrayList<ThriftCuisineData>(_list69.size);
          ThriftCuisineData _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new ThriftCuisineData();
            _elem70.read(iprot);
            struct.changedCuisine.add(_elem70);
          }
        }
        struct.setChangedCuisineIsSet(true);
      }
    }
  }

}

