/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.eatster.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class ThriftRestaurantData implements org.apache.thrift.TBase<ThriftRestaurantData, ThriftRestaurantData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftRestaurantData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftRestaurantData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CUISINES_FIELD_DESC = new org.apache.thrift.protocol.TField("cuisines", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField AVERAGE_CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("averageCheck", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INFO_WORKDAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("infoWorkdays", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField INFO_HOLIDAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("infoHolidays", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MAIN_PHOTO_FIELD_DESC = new org.apache.thrift.protocol.TField("mainPhoto", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PHOTOS_FIELD_DESC = new org.apache.thrift.protocol.TField("photos", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RESTAURANT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurantDescription", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SUBWAY_FIELD_DESC = new org.apache.thrift.protocol.TField("subway", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ENTERTAINMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("entertainments", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PAYMENT_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentCards", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField PARKING_FIELD_DESC = new org.apache.thrift.protocol.TField("parking", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField WIFI_FIELD_DESC = new org.apache.thrift.protocol.TField("wifi", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField KIDS_MENU_FIELD_DESC = new org.apache.thrift.protocol.TField("kidsMenu", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftRestaurantDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftRestaurantDataTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private List<String> cuisines; // required
  private List<ThriftActionData> actions; // required
  private String averageCheck; // required
  private ThriftPosition position; // required
  private int distance; // required
  private String address; // required
  private String infoWorkdays; // required
  private String infoHolidays; // required
  private String mainPhoto; // required
  private List<String> photos; // required
  private String url; // required
  private String restaurantDescription; // required
  private String phone; // required
  private String subway; // required
  private String entertainments; // required
  private List<String> paymentCards; // required
  private String parking; // required
  private boolean wifi; // required
  private boolean kidsMenu; // required
  private String logo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CUISINES((short)3, "cuisines"),
    ACTIONS((short)4, "actions"),
    AVERAGE_CHECK((short)5, "averageCheck"),
    POSITION((short)6, "position"),
    DISTANCE((short)7, "distance"),
    ADDRESS((short)8, "address"),
    INFO_WORKDAYS((short)9, "infoWorkdays"),
    INFO_HOLIDAYS((short)10, "infoHolidays"),
    MAIN_PHOTO((short)11, "mainPhoto"),
    PHOTOS((short)12, "photos"),
    URL((short)13, "url"),
    RESTAURANT_DESCRIPTION((short)14, "restaurantDescription"),
    PHONE((short)15, "phone"),
    SUBWAY((short)16, "subway"),
    ENTERTAINMENTS((short)17, "entertainments"),
    PAYMENT_CARDS((short)18, "paymentCards"),
    PARKING((short)19, "parking"),
    WIFI((short)20, "wifi"),
    KIDS_MENU((short)21, "kidsMenu"),
    LOGO((short)22, "logo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CUISINES
          return CUISINES;
        case 4: // ACTIONS
          return ACTIONS;
        case 5: // AVERAGE_CHECK
          return AVERAGE_CHECK;
        case 6: // POSITION
          return POSITION;
        case 7: // DISTANCE
          return DISTANCE;
        case 8: // ADDRESS
          return ADDRESS;
        case 9: // INFO_WORKDAYS
          return INFO_WORKDAYS;
        case 10: // INFO_HOLIDAYS
          return INFO_HOLIDAYS;
        case 11: // MAIN_PHOTO
          return MAIN_PHOTO;
        case 12: // PHOTOS
          return PHOTOS;
        case 13: // URL
          return URL;
        case 14: // RESTAURANT_DESCRIPTION
          return RESTAURANT_DESCRIPTION;
        case 15: // PHONE
          return PHONE;
        case 16: // SUBWAY
          return SUBWAY;
        case 17: // ENTERTAINMENTS
          return ENTERTAINMENTS;
        case 18: // PAYMENT_CARDS
          return PAYMENT_CARDS;
        case 19: // PARKING
          return PARKING;
        case 20: // WIFI
          return WIFI;
        case 21: // KIDS_MENU
          return KIDS_MENU;
        case 22: // LOGO
          return LOGO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DISTANCE_ISSET_ID = 1;
  private static final int __WIFI_ISSET_ID = 2;
  private static final int __KIDSMENU_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUISINES, new org.apache.thrift.meta_data.FieldMetaData("cuisines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftActionData.class))));
    tmpMap.put(_Fields.AVERAGE_CHECK, new org.apache.thrift.meta_data.FieldMetaData("averageCheck", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftPosition.class)));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFO_WORKDAYS, new org.apache.thrift.meta_data.FieldMetaData("infoWorkdays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFO_HOLIDAYS, new org.apache.thrift.meta_data.FieldMetaData("infoHolidays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIN_PHOTO, new org.apache.thrift.meta_data.FieldMetaData("mainPhoto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTOS, new org.apache.thrift.meta_data.FieldMetaData("photos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESTAURANT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("restaurantDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBWAY, new org.apache.thrift.meta_data.FieldMetaData("subway", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTERTAINMENTS, new org.apache.thrift.meta_data.FieldMetaData("entertainments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_CARDS, new org.apache.thrift.meta_data.FieldMetaData("paymentCards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARKING, new org.apache.thrift.meta_data.FieldMetaData("parking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIFI, new org.apache.thrift.meta_data.FieldMetaData("wifi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KIDS_MENU, new org.apache.thrift.meta_data.FieldMetaData("kidsMenu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftRestaurantData.class, metaDataMap);
  }

  public ThriftRestaurantData() {
  }

  public ThriftRestaurantData(
    long id,
    String name,
    List<String> cuisines,
    List<ThriftActionData> actions,
    String averageCheck,
    ThriftPosition position,
    int distance,
    String address,
    String infoWorkdays,
    String infoHolidays,
    String mainPhoto,
    List<String> photos,
    String url,
    String restaurantDescription,
    String phone,
    String subway,
    String entertainments,
    List<String> paymentCards,
    String parking,
    boolean wifi,
    boolean kidsMenu,
    String logo)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.cuisines = cuisines;
    this.actions = actions;
    this.averageCheck = averageCheck;
    this.position = position;
    this.distance = distance;
    setDistanceIsSet(true);
    this.address = address;
    this.infoWorkdays = infoWorkdays;
    this.infoHolidays = infoHolidays;
    this.mainPhoto = mainPhoto;
    this.photos = photos;
    this.url = url;
    this.restaurantDescription = restaurantDescription;
    this.phone = phone;
    this.subway = subway;
    this.entertainments = entertainments;
    this.paymentCards = paymentCards;
    this.parking = parking;
    this.wifi = wifi;
    setWifiIsSet(true);
    this.kidsMenu = kidsMenu;
    setKidsMenuIsSet(true);
    this.logo = logo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftRestaurantData(ThriftRestaurantData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCuisines()) {
      List<String> __this__cuisines = new ArrayList<String>(other.cuisines);
      this.cuisines = __this__cuisines;
    }
    if (other.isSetActions()) {
      List<ThriftActionData> __this__actions = new ArrayList<ThriftActionData>(other.actions.size());
      for (ThriftActionData other_element : other.actions) {
        __this__actions.add(new ThriftActionData(other_element));
      }
      this.actions = __this__actions;
    }
    if (other.isSetAverageCheck()) {
      this.averageCheck = other.averageCheck;
    }
    if (other.isSetPosition()) {
      this.position = new ThriftPosition(other.position);
    }
    this.distance = other.distance;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetInfoWorkdays()) {
      this.infoWorkdays = other.infoWorkdays;
    }
    if (other.isSetInfoHolidays()) {
      this.infoHolidays = other.infoHolidays;
    }
    if (other.isSetMainPhoto()) {
      this.mainPhoto = other.mainPhoto;
    }
    if (other.isSetPhotos()) {
      List<String> __this__photos = new ArrayList<String>(other.photos);
      this.photos = __this__photos;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetRestaurantDescription()) {
      this.restaurantDescription = other.restaurantDescription;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetSubway()) {
      this.subway = other.subway;
    }
    if (other.isSetEntertainments()) {
      this.entertainments = other.entertainments;
    }
    if (other.isSetPaymentCards()) {
      List<String> __this__paymentCards = new ArrayList<String>(other.paymentCards);
      this.paymentCards = __this__paymentCards;
    }
    if (other.isSetParking()) {
      this.parking = other.parking;
    }
    this.wifi = other.wifi;
    this.kidsMenu = other.kidsMenu;
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
  }

  public ThriftRestaurantData deepCopy() {
    return new ThriftRestaurantData(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.cuisines = null;
    this.actions = null;
    this.averageCheck = null;
    this.position = null;
    setDistanceIsSet(false);
    this.distance = 0;
    this.address = null;
    this.infoWorkdays = null;
    this.infoHolidays = null;
    this.mainPhoto = null;
    this.photos = null;
    this.url = null;
    this.restaurantDescription = null;
    this.phone = null;
    this.subway = null;
    this.entertainments = null;
    this.paymentCards = null;
    this.parking = null;
    setWifiIsSet(false);
    this.wifi = false;
    setKidsMenuIsSet(false);
    this.kidsMenu = false;
    this.logo = null;
  }

  public long getId() {
    return this.id;
  }

  public ThriftRestaurantData setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ThriftRestaurantData setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getCuisinesSize() {
    return (this.cuisines == null) ? 0 : this.cuisines.size();
  }

  public java.util.Iterator<String> getCuisinesIterator() {
    return (this.cuisines == null) ? null : this.cuisines.iterator();
  }

  public void addToCuisines(String elem) {
    if (this.cuisines == null) {
      this.cuisines = new ArrayList<String>();
    }
    this.cuisines.add(elem);
  }

  public List<String> getCuisines() {
    return this.cuisines;
  }

  public ThriftRestaurantData setCuisines(List<String> cuisines) {
    this.cuisines = cuisines;
    return this;
  }

  public void unsetCuisines() {
    this.cuisines = null;
  }

  /** Returns true if field cuisines is set (has been assigned a value) and false otherwise */
  public boolean isSetCuisines() {
    return this.cuisines != null;
  }

  public void setCuisinesIsSet(boolean value) {
    if (!value) {
      this.cuisines = null;
    }
  }

  public int getActionsSize() {
    return (this.actions == null) ? 0 : this.actions.size();
  }

  public java.util.Iterator<ThriftActionData> getActionsIterator() {
    return (this.actions == null) ? null : this.actions.iterator();
  }

  public void addToActions(ThriftActionData elem) {
    if (this.actions == null) {
      this.actions = new ArrayList<ThriftActionData>();
    }
    this.actions.add(elem);
  }

  public List<ThriftActionData> getActions() {
    return this.actions;
  }

  public ThriftRestaurantData setActions(List<ThriftActionData> actions) {
    this.actions = actions;
    return this;
  }

  public void unsetActions() {
    this.actions = null;
  }

  /** Returns true if field actions is set (has been assigned a value) and false otherwise */
  public boolean isSetActions() {
    return this.actions != null;
  }

  public void setActionsIsSet(boolean value) {
    if (!value) {
      this.actions = null;
    }
  }

  public String getAverageCheck() {
    return this.averageCheck;
  }

  public ThriftRestaurantData setAverageCheck(String averageCheck) {
    this.averageCheck = averageCheck;
    return this;
  }

  public void unsetAverageCheck() {
    this.averageCheck = null;
  }

  /** Returns true if field averageCheck is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageCheck() {
    return this.averageCheck != null;
  }

  public void setAverageCheckIsSet(boolean value) {
    if (!value) {
      this.averageCheck = null;
    }
  }

  public ThriftPosition getPosition() {
    return this.position;
  }

  public ThriftRestaurantData setPosition(ThriftPosition position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public int getDistance() {
    return this.distance;
  }

  public ThriftRestaurantData setDistance(int distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public ThriftRestaurantData setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getInfoWorkdays() {
    return this.infoWorkdays;
  }

  public ThriftRestaurantData setInfoWorkdays(String infoWorkdays) {
    this.infoWorkdays = infoWorkdays;
    return this;
  }

  public void unsetInfoWorkdays() {
    this.infoWorkdays = null;
  }

  /** Returns true if field infoWorkdays is set (has been assigned a value) and false otherwise */
  public boolean isSetInfoWorkdays() {
    return this.infoWorkdays != null;
  }

  public void setInfoWorkdaysIsSet(boolean value) {
    if (!value) {
      this.infoWorkdays = null;
    }
  }

  public String getInfoHolidays() {
    return this.infoHolidays;
  }

  public ThriftRestaurantData setInfoHolidays(String infoHolidays) {
    this.infoHolidays = infoHolidays;
    return this;
  }

  public void unsetInfoHolidays() {
    this.infoHolidays = null;
  }

  /** Returns true if field infoHolidays is set (has been assigned a value) and false otherwise */
  public boolean isSetInfoHolidays() {
    return this.infoHolidays != null;
  }

  public void setInfoHolidaysIsSet(boolean value) {
    if (!value) {
      this.infoHolidays = null;
    }
  }

  public String getMainPhoto() {
    return this.mainPhoto;
  }

  public ThriftRestaurantData setMainPhoto(String mainPhoto) {
    this.mainPhoto = mainPhoto;
    return this;
  }

  public void unsetMainPhoto() {
    this.mainPhoto = null;
  }

  /** Returns true if field mainPhoto is set (has been assigned a value) and false otherwise */
  public boolean isSetMainPhoto() {
    return this.mainPhoto != null;
  }

  public void setMainPhotoIsSet(boolean value) {
    if (!value) {
      this.mainPhoto = null;
    }
  }

  public int getPhotosSize() {
    return (this.photos == null) ? 0 : this.photos.size();
  }

  public java.util.Iterator<String> getPhotosIterator() {
    return (this.photos == null) ? null : this.photos.iterator();
  }

  public void addToPhotos(String elem) {
    if (this.photos == null) {
      this.photos = new ArrayList<String>();
    }
    this.photos.add(elem);
  }

  public List<String> getPhotos() {
    return this.photos;
  }

  public ThriftRestaurantData setPhotos(List<String> photos) {
    this.photos = photos;
    return this;
  }

  public void unsetPhotos() {
    this.photos = null;
  }

  /** Returns true if field photos is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotos() {
    return this.photos != null;
  }

  public void setPhotosIsSet(boolean value) {
    if (!value) {
      this.photos = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public ThriftRestaurantData setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getRestaurantDescription() {
    return this.restaurantDescription;
  }

  public ThriftRestaurantData setRestaurantDescription(String restaurantDescription) {
    this.restaurantDescription = restaurantDescription;
    return this;
  }

  public void unsetRestaurantDescription() {
    this.restaurantDescription = null;
  }

  /** Returns true if field restaurantDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurantDescription() {
    return this.restaurantDescription != null;
  }

  public void setRestaurantDescriptionIsSet(boolean value) {
    if (!value) {
      this.restaurantDescription = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public ThriftRestaurantData setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getSubway() {
    return this.subway;
  }

  public ThriftRestaurantData setSubway(String subway) {
    this.subway = subway;
    return this;
  }

  public void unsetSubway() {
    this.subway = null;
  }

  /** Returns true if field subway is set (has been assigned a value) and false otherwise */
  public boolean isSetSubway() {
    return this.subway != null;
  }

  public void setSubwayIsSet(boolean value) {
    if (!value) {
      this.subway = null;
    }
  }

  public String getEntertainments() {
    return this.entertainments;
  }

  public ThriftRestaurantData setEntertainments(String entertainments) {
    this.entertainments = entertainments;
    return this;
  }

  public void unsetEntertainments() {
    this.entertainments = null;
  }

  /** Returns true if field entertainments is set (has been assigned a value) and false otherwise */
  public boolean isSetEntertainments() {
    return this.entertainments != null;
  }

  public void setEntertainmentsIsSet(boolean value) {
    if (!value) {
      this.entertainments = null;
    }
  }

  public int getPaymentCardsSize() {
    return (this.paymentCards == null) ? 0 : this.paymentCards.size();
  }

  public java.util.Iterator<String> getPaymentCardsIterator() {
    return (this.paymentCards == null) ? null : this.paymentCards.iterator();
  }

  public void addToPaymentCards(String elem) {
    if (this.paymentCards == null) {
      this.paymentCards = new ArrayList<String>();
    }
    this.paymentCards.add(elem);
  }

  public List<String> getPaymentCards() {
    return this.paymentCards;
  }

  public ThriftRestaurantData setPaymentCards(List<String> paymentCards) {
    this.paymentCards = paymentCards;
    return this;
  }

  public void unsetPaymentCards() {
    this.paymentCards = null;
  }

  /** Returns true if field paymentCards is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentCards() {
    return this.paymentCards != null;
  }

  public void setPaymentCardsIsSet(boolean value) {
    if (!value) {
      this.paymentCards = null;
    }
  }

  public String getParking() {
    return this.parking;
  }

  public ThriftRestaurantData setParking(String parking) {
    this.parking = parking;
    return this;
  }

  public void unsetParking() {
    this.parking = null;
  }

  /** Returns true if field parking is set (has been assigned a value) and false otherwise */
  public boolean isSetParking() {
    return this.parking != null;
  }

  public void setParkingIsSet(boolean value) {
    if (!value) {
      this.parking = null;
    }
  }

  public boolean isWifi() {
    return this.wifi;
  }

  public ThriftRestaurantData setWifi(boolean wifi) {
    this.wifi = wifi;
    setWifiIsSet(true);
    return this;
  }

  public void unsetWifi() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIFI_ISSET_ID);
  }

  /** Returns true if field wifi is set (has been assigned a value) and false otherwise */
  public boolean isSetWifi() {
    return EncodingUtils.testBit(__isset_bitfield, __WIFI_ISSET_ID);
  }

  public void setWifiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIFI_ISSET_ID, value);
  }

  public boolean isKidsMenu() {
    return this.kidsMenu;
  }

  public ThriftRestaurantData setKidsMenu(boolean kidsMenu) {
    this.kidsMenu = kidsMenu;
    setKidsMenuIsSet(true);
    return this;
  }

  public void unsetKidsMenu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KIDSMENU_ISSET_ID);
  }

  /** Returns true if field kidsMenu is set (has been assigned a value) and false otherwise */
  public boolean isSetKidsMenu() {
    return EncodingUtils.testBit(__isset_bitfield, __KIDSMENU_ISSET_ID);
  }

  public void setKidsMenuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KIDSMENU_ISSET_ID, value);
  }

  public String getLogo() {
    return this.logo;
  }

  public ThriftRestaurantData setLogo(String logo) {
    this.logo = logo;
    return this;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CUISINES:
      if (value == null) {
        unsetCuisines();
      } else {
        setCuisines((List<String>)value);
      }
      break;

    case ACTIONS:
      if (value == null) {
        unsetActions();
      } else {
        setActions((List<ThriftActionData>)value);
      }
      break;

    case AVERAGE_CHECK:
      if (value == null) {
        unsetAverageCheck();
      } else {
        setAverageCheck((String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((ThriftPosition)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case INFO_WORKDAYS:
      if (value == null) {
        unsetInfoWorkdays();
      } else {
        setInfoWorkdays((String)value);
      }
      break;

    case INFO_HOLIDAYS:
      if (value == null) {
        unsetInfoHolidays();
      } else {
        setInfoHolidays((String)value);
      }
      break;

    case MAIN_PHOTO:
      if (value == null) {
        unsetMainPhoto();
      } else {
        setMainPhoto((String)value);
      }
      break;

    case PHOTOS:
      if (value == null) {
        unsetPhotos();
      } else {
        setPhotos((List<String>)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case RESTAURANT_DESCRIPTION:
      if (value == null) {
        unsetRestaurantDescription();
      } else {
        setRestaurantDescription((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case SUBWAY:
      if (value == null) {
        unsetSubway();
      } else {
        setSubway((String)value);
      }
      break;

    case ENTERTAINMENTS:
      if (value == null) {
        unsetEntertainments();
      } else {
        setEntertainments((String)value);
      }
      break;

    case PAYMENT_CARDS:
      if (value == null) {
        unsetPaymentCards();
      } else {
        setPaymentCards((List<String>)value);
      }
      break;

    case PARKING:
      if (value == null) {
        unsetParking();
      } else {
        setParking((String)value);
      }
      break;

    case WIFI:
      if (value == null) {
        unsetWifi();
      } else {
        setWifi((Boolean)value);
      }
      break;

    case KIDS_MENU:
      if (value == null) {
        unsetKidsMenu();
      } else {
        setKidsMenu((Boolean)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case CUISINES:
      return getCuisines();

    case ACTIONS:
      return getActions();

    case AVERAGE_CHECK:
      return getAverageCheck();

    case POSITION:
      return getPosition();

    case DISTANCE:
      return Integer.valueOf(getDistance());

    case ADDRESS:
      return getAddress();

    case INFO_WORKDAYS:
      return getInfoWorkdays();

    case INFO_HOLIDAYS:
      return getInfoHolidays();

    case MAIN_PHOTO:
      return getMainPhoto();

    case PHOTOS:
      return getPhotos();

    case URL:
      return getUrl();

    case RESTAURANT_DESCRIPTION:
      return getRestaurantDescription();

    case PHONE:
      return getPhone();

    case SUBWAY:
      return getSubway();

    case ENTERTAINMENTS:
      return getEntertainments();

    case PAYMENT_CARDS:
      return getPaymentCards();

    case PARKING:
      return getParking();

    case WIFI:
      return Boolean.valueOf(isWifi());

    case KIDS_MENU:
      return Boolean.valueOf(isKidsMenu());

    case LOGO:
      return getLogo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CUISINES:
      return isSetCuisines();
    case ACTIONS:
      return isSetActions();
    case AVERAGE_CHECK:
      return isSetAverageCheck();
    case POSITION:
      return isSetPosition();
    case DISTANCE:
      return isSetDistance();
    case ADDRESS:
      return isSetAddress();
    case INFO_WORKDAYS:
      return isSetInfoWorkdays();
    case INFO_HOLIDAYS:
      return isSetInfoHolidays();
    case MAIN_PHOTO:
      return isSetMainPhoto();
    case PHOTOS:
      return isSetPhotos();
    case URL:
      return isSetUrl();
    case RESTAURANT_DESCRIPTION:
      return isSetRestaurantDescription();
    case PHONE:
      return isSetPhone();
    case SUBWAY:
      return isSetSubway();
    case ENTERTAINMENTS:
      return isSetEntertainments();
    case PAYMENT_CARDS:
      return isSetPaymentCards();
    case PARKING:
      return isSetParking();
    case WIFI:
      return isSetWifi();
    case KIDS_MENU:
      return isSetKidsMenu();
    case LOGO:
      return isSetLogo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftRestaurantData)
      return this.equals((ThriftRestaurantData)that);
    return false;
  }

  public boolean equals(ThriftRestaurantData that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_cuisines = true && this.isSetCuisines();
    boolean that_present_cuisines = true && that.isSetCuisines();
    if (this_present_cuisines || that_present_cuisines) {
      if (!(this_present_cuisines && that_present_cuisines))
        return false;
      if (!this.cuisines.equals(that.cuisines))
        return false;
    }

    boolean this_present_actions = true && this.isSetActions();
    boolean that_present_actions = true && that.isSetActions();
    if (this_present_actions || that_present_actions) {
      if (!(this_present_actions && that_present_actions))
        return false;
      if (!this.actions.equals(that.actions))
        return false;
    }

    boolean this_present_averageCheck = true && this.isSetAverageCheck();
    boolean that_present_averageCheck = true && that.isSetAverageCheck();
    if (this_present_averageCheck || that_present_averageCheck) {
      if (!(this_present_averageCheck && that_present_averageCheck))
        return false;
      if (!this.averageCheck.equals(that.averageCheck))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_distance = true;
    boolean that_present_distance = true;
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_infoWorkdays = true && this.isSetInfoWorkdays();
    boolean that_present_infoWorkdays = true && that.isSetInfoWorkdays();
    if (this_present_infoWorkdays || that_present_infoWorkdays) {
      if (!(this_present_infoWorkdays && that_present_infoWorkdays))
        return false;
      if (!this.infoWorkdays.equals(that.infoWorkdays))
        return false;
    }

    boolean this_present_infoHolidays = true && this.isSetInfoHolidays();
    boolean that_present_infoHolidays = true && that.isSetInfoHolidays();
    if (this_present_infoHolidays || that_present_infoHolidays) {
      if (!(this_present_infoHolidays && that_present_infoHolidays))
        return false;
      if (!this.infoHolidays.equals(that.infoHolidays))
        return false;
    }

    boolean this_present_mainPhoto = true && this.isSetMainPhoto();
    boolean that_present_mainPhoto = true && that.isSetMainPhoto();
    if (this_present_mainPhoto || that_present_mainPhoto) {
      if (!(this_present_mainPhoto && that_present_mainPhoto))
        return false;
      if (!this.mainPhoto.equals(that.mainPhoto))
        return false;
    }

    boolean this_present_photos = true && this.isSetPhotos();
    boolean that_present_photos = true && that.isSetPhotos();
    if (this_present_photos || that_present_photos) {
      if (!(this_present_photos && that_present_photos))
        return false;
      if (!this.photos.equals(that.photos))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_restaurantDescription = true && this.isSetRestaurantDescription();
    boolean that_present_restaurantDescription = true && that.isSetRestaurantDescription();
    if (this_present_restaurantDescription || that_present_restaurantDescription) {
      if (!(this_present_restaurantDescription && that_present_restaurantDescription))
        return false;
      if (!this.restaurantDescription.equals(that.restaurantDescription))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_subway = true && this.isSetSubway();
    boolean that_present_subway = true && that.isSetSubway();
    if (this_present_subway || that_present_subway) {
      if (!(this_present_subway && that_present_subway))
        return false;
      if (!this.subway.equals(that.subway))
        return false;
    }

    boolean this_present_entertainments = true && this.isSetEntertainments();
    boolean that_present_entertainments = true && that.isSetEntertainments();
    if (this_present_entertainments || that_present_entertainments) {
      if (!(this_present_entertainments && that_present_entertainments))
        return false;
      if (!this.entertainments.equals(that.entertainments))
        return false;
    }

    boolean this_present_paymentCards = true && this.isSetPaymentCards();
    boolean that_present_paymentCards = true && that.isSetPaymentCards();
    if (this_present_paymentCards || that_present_paymentCards) {
      if (!(this_present_paymentCards && that_present_paymentCards))
        return false;
      if (!this.paymentCards.equals(that.paymentCards))
        return false;
    }

    boolean this_present_parking = true && this.isSetParking();
    boolean that_present_parking = true && that.isSetParking();
    if (this_present_parking || that_present_parking) {
      if (!(this_present_parking && that_present_parking))
        return false;
      if (!this.parking.equals(that.parking))
        return false;
    }

    boolean this_present_wifi = true;
    boolean that_present_wifi = true;
    if (this_present_wifi || that_present_wifi) {
      if (!(this_present_wifi && that_present_wifi))
        return false;
      if (this.wifi != that.wifi)
        return false;
    }

    boolean this_present_kidsMenu = true;
    boolean that_present_kidsMenu = true;
    if (this_present_kidsMenu || that_present_kidsMenu) {
      if (!(this_present_kidsMenu && that_present_kidsMenu))
        return false;
      if (this.kidsMenu != that.kidsMenu)
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_cuisines = true && (isSetCuisines());
    list.add(present_cuisines);
    if (present_cuisines)
      list.add(cuisines);

    boolean present_actions = true && (isSetActions());
    list.add(present_actions);
    if (present_actions)
      list.add(actions);

    boolean present_averageCheck = true && (isSetAverageCheck());
    list.add(present_averageCheck);
    if (present_averageCheck)
      list.add(averageCheck);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_distance = true;
    list.add(present_distance);
    if (present_distance)
      list.add(distance);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_infoWorkdays = true && (isSetInfoWorkdays());
    list.add(present_infoWorkdays);
    if (present_infoWorkdays)
      list.add(infoWorkdays);

    boolean present_infoHolidays = true && (isSetInfoHolidays());
    list.add(present_infoHolidays);
    if (present_infoHolidays)
      list.add(infoHolidays);

    boolean present_mainPhoto = true && (isSetMainPhoto());
    list.add(present_mainPhoto);
    if (present_mainPhoto)
      list.add(mainPhoto);

    boolean present_photos = true && (isSetPhotos());
    list.add(present_photos);
    if (present_photos)
      list.add(photos);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_restaurantDescription = true && (isSetRestaurantDescription());
    list.add(present_restaurantDescription);
    if (present_restaurantDescription)
      list.add(restaurantDescription);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_subway = true && (isSetSubway());
    list.add(present_subway);
    if (present_subway)
      list.add(subway);

    boolean present_entertainments = true && (isSetEntertainments());
    list.add(present_entertainments);
    if (present_entertainments)
      list.add(entertainments);

    boolean present_paymentCards = true && (isSetPaymentCards());
    list.add(present_paymentCards);
    if (present_paymentCards)
      list.add(paymentCards);

    boolean present_parking = true && (isSetParking());
    list.add(present_parking);
    if (present_parking)
      list.add(parking);

    boolean present_wifi = true;
    list.add(present_wifi);
    if (present_wifi)
      list.add(wifi);

    boolean present_kidsMenu = true;
    list.add(present_kidsMenu);
    if (present_kidsMenu)
      list.add(kidsMenu);

    boolean present_logo = true && (isSetLogo());
    list.add(present_logo);
    if (present_logo)
      list.add(logo);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftRestaurantData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCuisines()).compareTo(other.isSetCuisines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCuisines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cuisines, other.cuisines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActions()).compareTo(other.isSetActions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, other.actions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageCheck()).compareTo(other.isSetAverageCheck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageCheck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageCheck, other.averageCheck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfoWorkdays()).compareTo(other.isSetInfoWorkdays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfoWorkdays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoWorkdays, other.infoWorkdays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfoHolidays()).compareTo(other.isSetInfoHolidays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfoHolidays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoHolidays, other.infoHolidays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainPhoto()).compareTo(other.isSetMainPhoto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainPhoto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainPhoto, other.mainPhoto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotos()).compareTo(other.isSetPhotos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photos, other.photos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurantDescription()).compareTo(other.isSetRestaurantDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurantDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurantDescription, other.restaurantDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubway()).compareTo(other.isSetSubway());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubway()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subway, other.subway);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntertainments()).compareTo(other.isSetEntertainments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntertainments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entertainments, other.entertainments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentCards()).compareTo(other.isSetPaymentCards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentCards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentCards, other.paymentCards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParking()).compareTo(other.isSetParking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parking, other.parking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWifi()).compareTo(other.isSetWifi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifi, other.wifi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKidsMenu()).compareTo(other.isSetKidsMenu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKidsMenu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kidsMenu, other.kidsMenu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftRestaurantData(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cuisines:");
    if (this.cuisines == null) {
      sb.append("null");
    } else {
      sb.append(this.cuisines);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actions:");
    if (this.actions == null) {
      sb.append("null");
    } else {
      sb.append(this.actions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageCheck:");
    if (this.averageCheck == null) {
      sb.append("null");
    } else {
      sb.append(this.averageCheck);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    if (this.position == null) {
      sb.append("null");
    } else {
      sb.append(this.position);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distance:");
    sb.append(this.distance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("infoWorkdays:");
    if (this.infoWorkdays == null) {
      sb.append("null");
    } else {
      sb.append(this.infoWorkdays);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("infoHolidays:");
    if (this.infoHolidays == null) {
      sb.append("null");
    } else {
      sb.append(this.infoHolidays);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mainPhoto:");
    if (this.mainPhoto == null) {
      sb.append("null");
    } else {
      sb.append(this.mainPhoto);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photos:");
    if (this.photos == null) {
      sb.append("null");
    } else {
      sb.append(this.photos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurantDescription:");
    if (this.restaurantDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.restaurantDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subway:");
    if (this.subway == null) {
      sb.append("null");
    } else {
      sb.append(this.subway);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entertainments:");
    if (this.entertainments == null) {
      sb.append("null");
    } else {
      sb.append(this.entertainments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentCards:");
    if (this.paymentCards == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentCards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parking:");
    if (this.parking == null) {
      sb.append("null");
    } else {
      sb.append(this.parking);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wifi:");
    sb.append(this.wifi);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kidsMenu:");
    sb.append(this.kidsMenu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("logo:");
    if (this.logo == null) {
      sb.append("null");
    } else {
      sb.append(this.logo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (position != null) {
      position.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftRestaurantDataStandardSchemeFactory implements SchemeFactory {
    public ThriftRestaurantDataStandardScheme getScheme() {
      return new ThriftRestaurantDataStandardScheme();
    }
  }

  private static class ThriftRestaurantDataStandardScheme extends StandardScheme<ThriftRestaurantData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftRestaurantData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUISINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.cuisines = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.cuisines.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setCuisinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.actions = new ArrayList<ThriftActionData>(_list11.size);
                ThriftActionData _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new ThriftActionData();
                  _elem12.read(iprot);
                  struct.actions.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setActionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVERAGE_CHECK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.averageCheck = iprot.readString();
              struct.setAverageCheckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.position = new ThriftPosition();
              struct.position.read(iprot);
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distance = iprot.readI32();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INFO_WORKDAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.infoWorkdays = iprot.readString();
              struct.setInfoWorkdaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INFO_HOLIDAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.infoHolidays = iprot.readString();
              struct.setInfoHolidaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAIN_PHOTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mainPhoto = iprot.readString();
              struct.setMainPhotoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PHOTOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.photos = new ArrayList<String>(_list14.size);
                String _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readString();
                  struct.photos.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setPhotosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RESTAURANT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.restaurantDescription = iprot.readString();
              struct.setRestaurantDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SUBWAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subway = iprot.readString();
              struct.setSubwayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ENTERTAINMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entertainments = iprot.readString();
              struct.setEntertainmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAYMENT_CARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.paymentCards = new ArrayList<String>(_list17.size);
                String _elem18;
                for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                {
                  _elem18 = iprot.readString();
                  struct.paymentCards.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setPaymentCardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PARKING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parking = iprot.readString();
              struct.setParkingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // WIFI
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wifi = iprot.readBool();
              struct.setWifiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // KIDS_MENU
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.kidsMenu = iprot.readBool();
              struct.setKidsMenuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftRestaurantData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.cuisines != null) {
        oprot.writeFieldBegin(CUISINES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cuisines.size()));
          for (String _iter20 : struct.cuisines)
          {
            oprot.writeString(_iter20);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.actions != null) {
        oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actions.size()));
          for (ThriftActionData _iter21 : struct.actions)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.averageCheck != null) {
        oprot.writeFieldBegin(AVERAGE_CHECK_FIELD_DESC);
        oprot.writeString(struct.averageCheck);
        oprot.writeFieldEnd();
      }
      if (struct.position != null) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        struct.position.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
      oprot.writeI32(struct.distance);
      oprot.writeFieldEnd();
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.infoWorkdays != null) {
        oprot.writeFieldBegin(INFO_WORKDAYS_FIELD_DESC);
        oprot.writeString(struct.infoWorkdays);
        oprot.writeFieldEnd();
      }
      if (struct.infoHolidays != null) {
        oprot.writeFieldBegin(INFO_HOLIDAYS_FIELD_DESC);
        oprot.writeString(struct.infoHolidays);
        oprot.writeFieldEnd();
      }
      if (struct.mainPhoto != null) {
        oprot.writeFieldBegin(MAIN_PHOTO_FIELD_DESC);
        oprot.writeString(struct.mainPhoto);
        oprot.writeFieldEnd();
      }
      if (struct.photos != null) {
        oprot.writeFieldBegin(PHOTOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.photos.size()));
          for (String _iter22 : struct.photos)
          {
            oprot.writeString(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.restaurantDescription != null) {
        oprot.writeFieldBegin(RESTAURANT_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.restaurantDescription);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.subway != null) {
        oprot.writeFieldBegin(SUBWAY_FIELD_DESC);
        oprot.writeString(struct.subway);
        oprot.writeFieldEnd();
      }
      if (struct.entertainments != null) {
        oprot.writeFieldBegin(ENTERTAINMENTS_FIELD_DESC);
        oprot.writeString(struct.entertainments);
        oprot.writeFieldEnd();
      }
      if (struct.paymentCards != null) {
        oprot.writeFieldBegin(PAYMENT_CARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paymentCards.size()));
          for (String _iter23 : struct.paymentCards)
          {
            oprot.writeString(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.parking != null) {
        oprot.writeFieldBegin(PARKING_FIELD_DESC);
        oprot.writeString(struct.parking);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WIFI_FIELD_DESC);
      oprot.writeBool(struct.wifi);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KIDS_MENU_FIELD_DESC);
      oprot.writeBool(struct.kidsMenu);
      oprot.writeFieldEnd();
      if (struct.logo != null) {
        oprot.writeFieldBegin(LOGO_FIELD_DESC);
        oprot.writeString(struct.logo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftRestaurantDataTupleSchemeFactory implements SchemeFactory {
    public ThriftRestaurantDataTupleScheme getScheme() {
      return new ThriftRestaurantDataTupleScheme();
    }
  }

  private static class ThriftRestaurantDataTupleScheme extends TupleScheme<ThriftRestaurantData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftRestaurantData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCuisines()) {
        optionals.set(2);
      }
      if (struct.isSetActions()) {
        optionals.set(3);
      }
      if (struct.isSetAverageCheck()) {
        optionals.set(4);
      }
      if (struct.isSetPosition()) {
        optionals.set(5);
      }
      if (struct.isSetDistance()) {
        optionals.set(6);
      }
      if (struct.isSetAddress()) {
        optionals.set(7);
      }
      if (struct.isSetInfoWorkdays()) {
        optionals.set(8);
      }
      if (struct.isSetInfoHolidays()) {
        optionals.set(9);
      }
      if (struct.isSetMainPhoto()) {
        optionals.set(10);
      }
      if (struct.isSetPhotos()) {
        optionals.set(11);
      }
      if (struct.isSetUrl()) {
        optionals.set(12);
      }
      if (struct.isSetRestaurantDescription()) {
        optionals.set(13);
      }
      if (struct.isSetPhone()) {
        optionals.set(14);
      }
      if (struct.isSetSubway()) {
        optionals.set(15);
      }
      if (struct.isSetEntertainments()) {
        optionals.set(16);
      }
      if (struct.isSetPaymentCards()) {
        optionals.set(17);
      }
      if (struct.isSetParking()) {
        optionals.set(18);
      }
      if (struct.isSetWifi()) {
        optionals.set(19);
      }
      if (struct.isSetKidsMenu()) {
        optionals.set(20);
      }
      if (struct.isSetLogo()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCuisines()) {
        {
          oprot.writeI32(struct.cuisines.size());
          for (String _iter24 : struct.cuisines)
          {
            oprot.writeString(_iter24);
          }
        }
      }
      if (struct.isSetActions()) {
        {
          oprot.writeI32(struct.actions.size());
          for (ThriftActionData _iter25 : struct.actions)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetAverageCheck()) {
        oprot.writeString(struct.averageCheck);
      }
      if (struct.isSetPosition()) {
        struct.position.write(oprot);
      }
      if (struct.isSetDistance()) {
        oprot.writeI32(struct.distance);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetInfoWorkdays()) {
        oprot.writeString(struct.infoWorkdays);
      }
      if (struct.isSetInfoHolidays()) {
        oprot.writeString(struct.infoHolidays);
      }
      if (struct.isSetMainPhoto()) {
        oprot.writeString(struct.mainPhoto);
      }
      if (struct.isSetPhotos()) {
        {
          oprot.writeI32(struct.photos.size());
          for (String _iter26 : struct.photos)
          {
            oprot.writeString(_iter26);
          }
        }
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetRestaurantDescription()) {
        oprot.writeString(struct.restaurantDescription);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetSubway()) {
        oprot.writeString(struct.subway);
      }
      if (struct.isSetEntertainments()) {
        oprot.writeString(struct.entertainments);
      }
      if (struct.isSetPaymentCards()) {
        {
          oprot.writeI32(struct.paymentCards.size());
          for (String _iter27 : struct.paymentCards)
          {
            oprot.writeString(_iter27);
          }
        }
      }
      if (struct.isSetParking()) {
        oprot.writeString(struct.parking);
      }
      if (struct.isSetWifi()) {
        oprot.writeBool(struct.wifi);
      }
      if (struct.isSetKidsMenu()) {
        oprot.writeBool(struct.kidsMenu);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftRestaurantData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cuisines = new ArrayList<String>(_list28.size);
          String _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = iprot.readString();
            struct.cuisines.add(_elem29);
          }
        }
        struct.setCuisinesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.actions = new ArrayList<ThriftActionData>(_list31.size);
          ThriftActionData _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new ThriftActionData();
            _elem32.read(iprot);
            struct.actions.add(_elem32);
          }
        }
        struct.setActionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.averageCheck = iprot.readString();
        struct.setAverageCheckIsSet(true);
      }
      if (incoming.get(5)) {
        struct.position = new ThriftPosition();
        struct.position.read(iprot);
        struct.setPositionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.distance = iprot.readI32();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.infoWorkdays = iprot.readString();
        struct.setInfoWorkdaysIsSet(true);
      }
      if (incoming.get(9)) {
        struct.infoHolidays = iprot.readString();
        struct.setInfoHolidaysIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mainPhoto = iprot.readString();
        struct.setMainPhotoIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.photos = new ArrayList<String>(_list34.size);
          String _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readString();
            struct.photos.add(_elem35);
          }
        }
        struct.setPhotosIsSet(true);
      }
      if (incoming.get(12)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.restaurantDescription = iprot.readString();
        struct.setRestaurantDescriptionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(15)) {
        struct.subway = iprot.readString();
        struct.setSubwayIsSet(true);
      }
      if (incoming.get(16)) {
        struct.entertainments = iprot.readString();
        struct.setEntertainmentsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.paymentCards = new ArrayList<String>(_list37.size);
          String _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readString();
            struct.paymentCards.add(_elem38);
          }
        }
        struct.setPaymentCardsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.parking = iprot.readString();
        struct.setParkingIsSet(true);
      }
      if (incoming.get(19)) {
        struct.wifi = iprot.readBool();
        struct.setWifiIsSet(true);
      }
      if (incoming.get(20)) {
        struct.kidsMenu = iprot.readBool();
        struct.setKidsMenuIsSet(true);
      }
      if (incoming.get(21)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
    }
  }

}

